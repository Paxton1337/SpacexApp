{"version":3,"sources":["./src/app/services/navigate-center-service/navigate-center.service.ts","./src/app/services/progressbar-service/progress-bar.service.ts","./src/app/services/get-launches-service/getlaunches.service.ts"],"names":["NavigateCenterService","router","selectedLaunch","id","this","navigate","launches","Math","round","random","length","ProgressBarService","progress","progressRef","ref","start","complete","GetlaunchesService","http","of","get","pipe","switchMap","res","tap","idLaunch"],"mappings":"2JAMO,Y,MAAMA,EAEX,YAAoBC,GAAA,KAAAA,SAEpB,sBAAsBC,EAAwBC,GAC5C,OAA8BC,KAAKH,OAAOI,SAAhB,IAAnBH,EAA4C,CAAC,sBAAuBC,GAA4B,CAAC,sBAAuBA,IAGjI,qBAAqBG,GACnB,OAAOF,KAAKH,OAAOI,SAAS,CAAC,oBAAqBE,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,W,6CAT7EV,GAAqB,Y,yBAArBA,EAAqB,QAArBA,EAAqB,qBAFpB,S,GAEP,I,kJCAA,Y,MAAMW,EAGX,YAAoBC,GAAA,KAAAA,WAFZ,KAAAC,YAAcT,KAAKQ,SAASE,IAAI,cAIxC,QACEV,KAAKS,YAAYE,QAGnB,WACEX,KAAKS,YAAYG,Y,6CAVRL,GAAkB,Y,yBAAlBA,EAAkB,QAAlBA,EAAkB,qBAFjB,S,GAEP,GCGA,Q,MAAMM,EAEX,YAAoBC,EAA0BN,GAA1B,KAAAM,OAA0B,KAAAN,WAE9C,iBAEE,OADAR,KAAKQ,SAASG,QACP,OAAAI,EAAA,GAAGf,KAAKc,KAAKE,IAAI,2CAA2CC,KACjE,OAAAC,EAAA,GAAUC,GAAOA,GACjB,OAAAC,EAAA,GAAI,IAAMpB,KAAKQ,SAASI,aAI5B,iBAAiBS,GAEf,OADArB,KAAKQ,SAASG,QACP,OAAAI,EAAA,GAAGf,KAAKc,KAAKE,IAAI,0CAA0CK,IAAaJ,KAC7E,OAAAC,EAAA,GAAUC,GAAOA,GACjB,OAAAC,EAAA,GAAI,IAAMpB,KAAKQ,SAASI,c,6CAhBjBC,GAAkB,oB,yBAAlBA,EAAkB,QAAlBA,EAAkB,qBAFjB,S,GAEP","file":"common.e5534b4893c91d488712.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavigateCenterService {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  navigateBetweenLaunch(selectedLaunch: number, id: number): any {\r\n    return selectedLaunch === 1 ? this.router.navigate(['/launches/launch/', --id]) : this.router.navigate(['/launches/launch/', ++id]);\r\n  }\r\n\r\n  navigateRandomLaunch(launches: any): any {\r\n    return this.router.navigate(['/launches/launch/', Math.round(Math.random() * launches.length)]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgProgress } from 'ngx-progressbar';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressBarService {\r\n  private progressRef = this.progress.ref('myProgress');\r\n\r\n  constructor(private progress: NgProgress) { }\r\n\r\n  start(): void {\r\n    this.progressRef.start();\r\n  }\r\n\r\n  complete(): void {\r\n    this.progressRef.complete();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ProgressBarService } from '../progressbar-service/progress-bar.service';\r\nimport { of } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetlaunchesService {\r\n\r\n  constructor(private http: HttpClient, private progress: ProgressBarService) { }\r\n\r\n  getAllLaunches(): any {\r\n    this.progress.start();\r\n    return of(this.http.get('https://api.spacexdata.com/v3/launches')).pipe(\r\n      switchMap(res => res),\r\n      tap(() => this.progress.complete())\r\n    );\r\n  }\r\n\r\n  getCurrentLaunch(idLaunch: number): any {\r\n    this.progress.start();\r\n    return of(this.http.get(`https://api.spacexdata.com/v3/launches/${idLaunch}`)).pipe(\r\n      switchMap(res => res),\r\n      tap(() => this.progress.complete())\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}