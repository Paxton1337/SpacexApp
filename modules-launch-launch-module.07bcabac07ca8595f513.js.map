{"version":3,"sources":["./src/app/models/landPadsArray.ts","./src/app/services/get-landpads-service/getLandpads.service.ts","./node_modules/tslib/tslib.es6.js","./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js","./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/queue.js","./node_modules/rxjs/_esm2015/internal/operators/observeOn.js","./node_modules/rxjs/_esm2015/internal/ReplaySubject.js","./node_modules/rxjs/_esm2015/internal/operators/sample.js","./node_modules/rxjs/_esm2015/internal/operators/skip.js","./node_modules/@agm/core/__ivy_ngcc__/fesm2015/agm-core.js","./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js","./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js","./src/app/modules/launch/components/launch/launch.component.html","./src/app/modules/launch/launch-routing.module.ts","./src/app/modules/launch/components/launch/launch.component.ts","./src/app/modules/launch/launch.module.ts"],"names":["LandPads","id","name","lat","lng","GetLandpadsService","randomNumber","Math","round","random","of","pipe","switchMap","pads","filter","pad","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","AsyncAction","scheduler","work","super","this","state","delay","schedule","flush","closed","execute","_execute","requestAsyncId","AsyncScheduler","queue","Subscriber","destination","arg","notification","observe","unsubscribe","add","dispatch","ObserveOnMessage","scheduleMessage","Notification","createNext","err","createError","createComplete","Subject","bufferSize","Number","POSITIVE_INFINITY","windowTime","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","push","length","shift","ReplayEvent","_getNow","_trimBufferThenGetEvents","subscriber","len","subscription","ObjectUnsubscribedError","isStopped","hasError","Subscription","EMPTY","observers","SubjectSubscription","i","error","thrownError","complete","now","eventsCount","spliceCount","time","max","splice","notifier","source","sampleSubscriber","subscribe","subscribeToResult","OuterSubscriber","arguments","hasValue","outerValue","innerValue","outerIndex","innerIndex","innerSub","emitValue","SkipOperator","total","count","x","_c0","MapsAPILoader","ɵfac","t","ɵprov","token","factory","GoogleMapsAPIWrapper","_loader","_zone","_map","_mapResolver","el","mapOptions","runOutsideAngular","load","map","google","maps","Map","options","m","setOptions","addToMap","Marker","InfoWindow","Circle","Rectangle","getNativeMap","line","Polyline","setMap","polygon","Polygon","data","Data","newLayer","TransitLayer","BicyclingLayer","latLng","geometry","poly","containsLocation","eventName","Observable","observer","addListener","run","event","clearInstanceListeners","setCenter","getZoom","getBounds","getMapTypeId","zoom","setZoom","getCenter","panTo","y","panBy","padding","fitBounds","panToBounds","trigger","CircleManager","_apiWrapper","_circles","circle","set","createCircle","center","latitude","longitude","clickable","draggable","editable","fillColor","fillOpacity","radius","strokeColor","strokeOpacity","strokePosition","StrokePosition","strokeWeight","visible","zIndex","get","c","delete","getRadius","setEditable","setDraggable","setVisible","setRadius","listener","remove","DataLayerManager","_wrapper","_layers","layer","createDataLayer","style","d","geoJson","getDataFeatures","features","l","forEach","feature","index","indexOf","setControlPosition","controlPosition","setControls","controls","setDrawingMode","drawingMode","setStyle","addGeoJson","loadGeoJson","FitBoundsAccessor","FitBoundsService","loader","_boundsChangeSampleTime$","BehaviorSubject","_includeInBounds$","bounds$","from","timer","lift","includeInBounds","_generateBounds","configOrBufferSize","config","shareReplay","refCount","useRefCount","subject","isComplete","undefined","shareReplayOperator","bounds","LatLngBounds","b","extend","_createIdentifier","has","boundsMap","timeMs","WindowRef","window","DocumentRef","document","BROWSER_GLOBALS_PROVIDERS","GoogleMapsScriptProtocol","LAZY_MAPS_API_CONFIG","LazyMapsAPILoader","w","localeId","_SCRIPT_ID","callbackName","_config","_windowRef","_documentRef","getNativeWindow","_scriptLoadingPromise","scriptOnPage","getNativeDocument","getElementById","_assignScriptLoadingPromise","script","createElement","type","async","defer","src","_getScriptSrc","body","appendChild","scriptElem","onerror","protocol","HTTPS","AUTO","HTTP","queryParams","v","apiVersion","callback","key","apiKey","client","clientId","channel","libraries","region","language","hostAndPath","Object","keys","k","Array","isArray","join","entry","MarkerManager","_mapsWrapper","_markers","uiAnim","Animation","markerDirective","markerPromise","marker","setPosition","setTitle","title","setLabel","label","setIcon","iconUrl","setOpacity","opacity","setZIndex","setClickable","setAnimation","convertAnimation","animation","createMarker","position","icon","InfoWindowManager","_markerManager","_infoWindows","infoWindow","iWindow","close","hostMarker","getNativeMarker","open","content","maxWidth","disableAutoPan","infoWindowPromise","createInfoWindow","KmlLayerManager","KmlLayer","preserveViewport","screenOverlays","suppressInfoWindows","url","LayerManager","createTransitLayer","createBicyclingLayer","currentLayer","createMVCEventObservable","array","eventNames","fromEventPattern","addHandler","removeHandler","resultSelector","args","handler","retValue","isFunction","previous","newArr","getArray","_handler","evListeners","evListener","PolygonManager","_polygons","path","polygonPromise","createPolygon","geodesic","paths","setPaths","polygonDirective","getPath","getPaths","p","agmPolygon","startWith","parentMVEvent","merge","chMVC","chMVCEvent","pathIndex","retVal","subArr","toJSON","PolylineManager","_polylines","_getPoints","point","symbolPath","SymbolPath","icons","_getIcons","agmIcon","fixedRotation","offset","repeat","anchor","Point","anchorX","anchorY","_convertPath","rotation","scale","entries","val","polylinePromise","_convertPoints","_convertIcons","createPolyline","setPath","agmPolyline","getMVCPath","RectangleManager","_rectangles","rectangle","createRectangle","north","east","south","west","r","setBounds","subsrciber","infoWindowId","AgmInfoWindow","_infoWindowManager","_el","isOpen","infoWindowClose","_infoWindowAddedToManager","_id","toString","nativeElement","querySelector","addInfoWindow","_updateOpenState","_registerEventListeners","changes","_setInfoWindowOptions","createEventObservable","emit","_infoWindowOptionsInputs","currentValue","deleteInfoWindow","ɵcmp","selectors","inputs","outputs","ngContentSelectors","decls","vars","consts","template","rf","ctx","encapsulation","AgmMapControl","ɵdir","AgmMap","_elem","_platformId","_fitBoundsService","disableDoubleClickZoom","disableDefaultUI","scrollwheel","keyboardShortcuts","styles","usePanning","mapTypeId","clickableIcons","showDefaultInfoWindow","gestureHandling","tilt","_observableSubscriptions","mapClick","mapRightClick","mapDblClick","centerChange","boundsChange","mapTypeIdChange","idle","zoomChange","mapReady","tilesLoaded","container","_initMapInstance","createMap","minZoom","maxZoom","controlSize","backgroundColor","draggableCursor","draggingCursor","toLocaleLowerCase","restriction","_handleMapCenterChange","_handleMapZoomChange","_handleMapMouseEvents","_handleBoundsChange","_handleMapTypeIdChange","_handleTilesLoadedEvent","_handleIdleEvent","_handleControlChange","s","_fitBoundsSubscription","_updateMapOptionsChanges","_updatePosition","_mapOptionsAttributes","setMapOptions","recenter","setTimeout","triggerMapEvent","_fitBounds","_setCenter","newCenter","_subscribeToFitBoundsUpdates","_updateBounds","fitBoundsPadding","getBounds$","_isLatLngBoundsLiteral","newBounds","union","subscribeToMapEvent","z","emitter","placeId","stop","_setControls","mapControls","controlOptions","fullscreenControl","mapTypeControl","panControl","rotateControl","scaleControl","streetViewControl","zoomControl","control","assign","getOptions","contentQueries","dirIndex","_t","markerId","AgmMarker","openInfoWindow","animationChange","markerClick","markerDblClick","markerRightClick","dragStart","drag","dragEnd","mouseOver","mouseOut","_markerAddedToManger","_fitBoundsDetails$","handleInfoWindowUpdate","Error","addMarker","_updateFitBoundsDetails","_addEventListeners","updateMarkerPosition","updateTitle","updateLabel","updateDraggable","updateIcon","updateOpacity","updateVisible","updateZIndex","updateClickable","updateAnimation","asObservable","cs","dcs","rc","ds","de","mover","mout","anChng","deleteMarker","provide","useExisting","AgmCoreModule","lazyMapsAPILoaderConfig","ngModule","providers","useClass","useValue","ɵmod","ɵinj","routes","component","LaunchComponent","navCenter","routeAct","getLaunch","getPayload","launch","landPad","params","param","getCurrentLaunch","getLandPads","res","num","navigateBetweenLaunch","centeredNav","LaunchRoutingModule","forChild","LaunchModule","forRoot"],"mappings":"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","file":"modules-launch-launch-module.07bcabac07ca8595f513.js","sourcesContent":["import { LandPad } from './landPad';\r\n\r\nexport const LandPads: LandPad[] = [\r\n    {\r\n        id: 0,\r\n        name: 'LZ-2',\r\n        lat: 28.485833,\r\n        lng: -80.544444\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'LZ-4',\r\n        lat: 34.632989,\r\n        lng: -120.615167\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'OCISLY',\r\n        lat: 28.4104,\r\n        lng: 80.6188\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'JRTI',\r\n        lat: 33.7291858,\r\n        lng: -118.262015\r\n    },\r\n];\r\n","import { Injectable } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { LandPads } from '../../models/landPadsArray';\r\nimport { LandPad } from '../../models/landPad';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetLandpadsService {\r\n\r\n  constructor() { }\r\n\r\n  getLandPads(): Observable<LandPad> {\r\n    const randomNumber = Math.round(Math.random() * 3);\r\n    return of(LandPads).pipe(switchMap(pads => pads.filter(pad => randomNumber === pad.id)));\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { AsyncAction } from './AsyncAction';\nexport class QueueAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    schedule(state, delay = 0) {\n        if (delay > 0) {\n            return super.schedule(state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    }\n    execute(state, delay) {\n        return (delay > 0 || this.closed) ?\n            super.execute(state, delay) :\n            this._execute(state, delay);\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        return scheduler.flush(this);\n    }\n}\n//# sourceMappingURL=QueueAction.js.map","import { AsyncScheduler } from './AsyncScheduler';\nexport class QueueScheduler extends AsyncScheduler {\n}\n//# sourceMappingURL=QueueScheduler.js.map","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\nexport const queue = new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map","import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport class ObserveOnOperator {\n    constructor(scheduler, delay = 0) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    }\n}\nexport class ObserveOnSubscriber extends Subscriber {\n    constructor(destination, scheduler, delay = 0) {\n        super(destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    static dispatch(arg) {\n        const { notification, destination } = arg;\n        notification.observe(destination);\n        this.unsubscribe();\n    }\n    scheduleMessage(notification) {\n        const destination = this.destination;\n        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    }\n    _next(value) {\n        this.scheduleMessage(Notification.createNext(value));\n    }\n    _error(err) {\n        this.scheduleMessage(Notification.createError(err));\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleMessage(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nexport class ObserveOnMessage {\n    constructor(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n}\n//# sourceMappingURL=observeOn.js.map","import { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nexport class ReplaySubject extends Subject {\n    constructor(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {\n        super();\n        this.scheduler = scheduler;\n        this._events = [];\n        this._infiniteTimeWindow = false;\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            this._infiniteTimeWindow = true;\n            this.next = this.nextInfiniteTimeWindow;\n        }\n        else {\n            this.next = this.nextTimeWindow;\n        }\n    }\n    nextInfiniteTimeWindow(value) {\n        const _events = this._events;\n        _events.push(value);\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        super.next(value);\n    }\n    nextTimeWindow(value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        const _infiniteTimeWindow = this._infiniteTimeWindow;\n        const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        const scheduler = this.scheduler;\n        const len = _events.length;\n        let subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    }\n    _getNow() {\n        return (this.scheduler || queue).now();\n    }\n    _trimBufferThenGetEvents() {\n        const now = this._getNow();\n        const _bufferSize = this._bufferSize;\n        const _windowTime = this._windowTime;\n        const _events = this._events;\n        const eventsCount = _events.length;\n        let spliceCount = 0;\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    }\n}\nclass ReplayEvent {\n    constructor(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n}\n//# sourceMappingURL=ReplaySubject.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function sample(notifier) {\n    return (source) => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const sampleSubscriber = new SampleSubscriber(subscriber);\n        const subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    }\n}\nclass SampleSubscriber extends OuterSubscriber {\n    constructor() {\n        super(...arguments);\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    }\n}\n//# sourceMappingURL=sample.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { __awaiter } from 'tslib';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, Inject, LOCALE_ID, Directive, Input, EventEmitter, Output, Self, Component, ElementRef, PLATFORM_ID, ContentChildren, QueryList, forwardRef, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, ReplaySubject, bindCallback, of, throwError, fromEventPattern, merge, Subject } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, multicast, startWith, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"*\"];\nclass MapsAPILoader {\n}\nMapsAPILoader.ɵfac = function MapsAPILoader_Factory(t) { return new (t || MapsAPILoader)(); };\nMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MapsAPILoader, factory: MapsAPILoader.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MapsAPILoader, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\nclass GoogleMapsAPIWrapper {\n    constructor(_loader, _zone) {\n        this._loader = _loader;\n        this._zone = _zone;\n        this._map =\n            new Promise((resolve) => { this._mapResolver = resolve; });\n    }\n    createMap(el, mapOptions) {\n        return this._zone.runOutsideAngular(() => {\n            return this._loader.load().then(() => {\n                const map = new google.maps.Map(el, mapOptions);\n                this._mapResolver(map);\n                return;\n            });\n        });\n    }\n    setMapOptions(options) {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((m) => { m.setOptions(options); });\n        });\n    }\n    /**\n     * Creates a google map marker with the map context\n     */\n    createMarker(options = {}, addToMap = true) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                if (addToMap) {\n                    options.map = map;\n                }\n                return new google.maps.Marker(options);\n            });\n        });\n    }\n    createInfoWindow(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(() => new google.maps.InfoWindow(options));\n        });\n    }\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n    createCircle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                options.map = map;\n                return new google.maps.Circle(options);\n            });\n        });\n    }\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n    createRectangle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                options.map = map;\n                return new google.maps.Rectangle(options);\n            });\n        });\n    }\n    createPolyline(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                const line = new google.maps.Polyline(options);\n                line.setMap(map);\n                return line;\n            });\n        });\n    }\n    createPolygon(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                const polygon = new google.maps.Polygon(options);\n                polygon.setMap(map);\n                return polygon;\n            });\n        });\n    }\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n    createDataLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(m => {\n                const data = new google.maps.Data(options);\n                data.setMap(m);\n                return data;\n            });\n        });\n    }\n    /**\n     * Creates a TransitLayer instance for a map\n     * @returns a new transit layer object\n     */\n    createTransitLayer() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                const newLayer = new google.maps.TransitLayer();\n                newLayer.setMap(map);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @returns a new bicycling layer object\n     */\n    createBicyclingLayer() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                const newLayer = new google.maps.BicyclingLayer();\n                newLayer.setMap(map);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n    containsLocation(latLng, polygon) {\n        return this._map.then(() => google.maps.geometry.poly.containsLocation(latLng, polygon));\n    }\n    subscribeToMapEvent(eventName) {\n        return new Observable((observer) => {\n            this._map.then(m => m.addListener(eventName, () => this._zone.run(() => observer.next(arguments[0]))));\n        });\n    }\n    clearInstanceListeners() {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((map) => {\n                google.maps.event.clearInstanceListeners(map);\n            });\n        });\n    }\n    setCenter(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setCenter(latLng));\n        });\n    }\n    getZoom() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getZoom());\n        });\n    }\n    getBounds() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getBounds());\n        });\n    }\n    getMapTypeId() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getMapTypeId());\n        });\n    }\n    setZoom(zoom) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setZoom(zoom));\n        });\n    }\n    getCenter() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getCenter());\n        });\n    }\n    panTo(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panTo(latLng));\n        });\n    }\n    panBy(x, y) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panBy(x, y));\n        });\n    }\n    fitBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.fitBounds(latLng, padding));\n        });\n    }\n    panToBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panToBounds(latLng, padding));\n        });\n    }\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n    getNativeMap() { return this._map; }\n    /**\n     * Triggers the given event name on the map instance.\n     */\n    triggerMapEvent(eventName) {\n        return this._map.then((m) => google.maps.event.trigger(m, eventName));\n    }\n}\nGoogleMapsAPIWrapper.ɵfac = function GoogleMapsAPIWrapper_Factory(t) { return new (t || GoogleMapsAPIWrapper)(ɵngcc0.ɵɵinject(MapsAPILoader), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nGoogleMapsAPIWrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GoogleMapsAPIWrapper, factory: GoogleMapsAPIWrapper.ɵfac });\nGoogleMapsAPIWrapper.ctorParameters = () => [\n    { type: MapsAPILoader },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleMapsAPIWrapper, [{\n        type: Injectable\n    }], function () { return [{ type: MapsAPILoader }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nclass CircleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._circles = new Map();\n    }\n    addCircle(circle) {\n        this._apiWrapper.getNativeMap().then(() => this._circles.set(circle, this._apiWrapper.createCircle({\n            center: { lat: circle.latitude, lng: circle.longitude },\n            clickable: circle.clickable,\n            draggable: circle.draggable,\n            editable: circle.editable,\n            fillColor: circle.fillColor,\n            fillOpacity: circle.fillOpacity,\n            radius: circle.radius,\n            strokeColor: circle.strokeColor,\n            strokeOpacity: circle.strokeOpacity,\n            strokePosition: google.maps.StrokePosition[circle.strokePosition],\n            strokeWeight: circle.strokeWeight,\n            visible: circle.visible,\n            zIndex: circle.zIndex,\n        })));\n    }\n    /**\n     * Removes the given circle from the map.\n     */\n    removeCircle(circle) {\n        return this._circles.get(circle).then((c) => {\n            c.setMap(null);\n            this._circles.delete(circle);\n        });\n    }\n    setOptions(circle, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._circles.get(circle).then((c) => {\n                const actualParam = options.strokePosition;\n                options.strokePosition = google.maps.StrokePosition[actualParam];\n                c.setOptions(options);\n            });\n        });\n    }\n    getBounds(circle) {\n        return this._circles.get(circle).then((c) => c.getBounds());\n    }\n    getCenter(circle) {\n        return this._circles.get(circle).then((c) => c.getCenter());\n    }\n    getRadius(circle) {\n        return this._circles.get(circle).then((c) => c.getRadius());\n    }\n    setCenter(circle) {\n        return this._circles.get(circle).then(c => c.setCenter({ lat: circle.latitude, lng: circle.longitude }));\n    }\n    setEditable(circle) {\n        return this._circles.get(circle).then(c => c.setEditable(circle.editable));\n    }\n    setDraggable(circle) {\n        return this._circles.get(circle).then(c => c.setDraggable(circle.draggable));\n    }\n    setVisible(circle) {\n        return this._circles.get(circle).then(c => c.setVisible(circle.visible));\n    }\n    setRadius(circle) {\n        return this._circles.get(circle).then(c => c.setRadius(circle.radius));\n    }\n    getNativeCircle(circle) {\n        return this._circles.get(circle);\n    }\n    createEventObservable(eventName, circle) {\n        return new Observable((observer) => {\n            let listener = null;\n            this._circles.get(circle).then((c) => {\n                listener = c.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n}\nCircleManager.ɵfac = function CircleManager_Factory(t) { return new (t || CircleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nCircleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CircleManager, factory: CircleManager.ɵfac });\nCircleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CircleManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\nclass DataLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n    addDataLayer(layer) {\n        const newLayer = this._wrapper.createDataLayer({\n            style: layer.style,\n        })\n            .then(d => {\n            if (layer.geoJson) {\n                // NOTE: accessing \"features\" on google.maps.Data is undocumented\n                this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n            }\n            return d;\n        });\n        this._layers.set(layer, newLayer);\n    }\n    deleteDataLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    updateGeoJson(layer, geoJson) {\n        this._layers.get(layer).then(l => {\n            l.forEach(feature => {\n                l.remove(feature);\n                // NOTE: accessing \"features\" on google.maps.Data is undocumented\n                const index = l.features.indexOf(feature, 0);\n                if (index > -1) {\n                    l.features.splice(index, 1);\n                }\n            });\n            this.getDataFeatures(l, geoJson).then(features => l.features = features);\n        });\n    }\n    setDataOptions(layer, options) {\n        this._layers.get(layer).then(l => {\n            l.setControlPosition(options.controlPosition);\n            l.setControls(options.controls);\n            l.setDrawingMode(options.drawingMode);\n            l.setStyle(options.style);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((d) => {\n                d.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n    getDataFeatures(d, geoJson) {\n        return new Promise((resolve, reject) => {\n            if (typeof geoJson === 'object') {\n                try {\n                    const features = d.addGeoJson(geoJson);\n                    resolve(features);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            else if (typeof geoJson === 'string') {\n                d.loadGeoJson(geoJson, null, resolve);\n            }\n            else {\n                reject(`Impossible to extract features from geoJson: wrong argument type`);\n            }\n        });\n    }\n}\nDataLayerManager.ɵfac = function DataLayerManager_Factory(t) { return new (t || DataLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nDataLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DataLayerManager, factory: DataLayerManager.ɵfac });\nDataLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataLayerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nclass FitBoundsAccessor {\n}\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\nclass FitBoundsService {\n    constructor(loader) {\n        this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n        this._includeInBounds$ = new BehaviorSubject(new Map());\n        this.bounds$ = from(loader.load()).pipe(flatMap(() => this._includeInBounds$), sample(this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time)))), map(includeInBounds => this._generateBounds(includeInBounds)), shareReplay(1));\n    }\n    _generateBounds(includeInBounds) {\n        const bounds = new google.maps.LatLngBounds();\n        includeInBounds.forEach(b => bounds.extend(b));\n        return bounds;\n    }\n    addToBounds(latLng) {\n        const id = this._createIdentifier(latLng);\n        if (this._includeInBounds$.value.has(id)) {\n            return;\n        }\n        const boundsMap = this._includeInBounds$.value;\n        boundsMap.set(id, latLng);\n        this._includeInBounds$.next(boundsMap);\n    }\n    removeFromBounds(latLng) {\n        const boundsMap = this._includeInBounds$.value;\n        boundsMap.delete(this._createIdentifier(latLng));\n        this._includeInBounds$.next(boundsMap);\n    }\n    changeFitBoundsChangeSampleTime(timeMs) {\n        this._boundsChangeSampleTime$.next(timeMs);\n    }\n    getBounds$() {\n        return this.bounds$;\n    }\n    _createIdentifier(latLng) {\n        return `${latLng.lat}+${latLng.lng}`;\n    }\n}\nFitBoundsService.ɵfac = function FitBoundsService_Factory(t) { return new (t || FitBoundsService)(ɵngcc0.ɵɵinject(MapsAPILoader)); };\nFitBoundsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FitBoundsService, factory: FitBoundsService.ɵfac });\nFitBoundsService.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FitBoundsService, [{\n        type: Injectable\n    }], function () { return [{ type: MapsAPILoader }]; }, null); })();\n\nclass AgmGeocoder {\n    constructor(loader) {\n        const connectableGeocoder$ = new Observable(subscriber => {\n            loader.load().then(() => subscriber.next());\n        })\n            .pipe(map(() => this._createGeocoder()), multicast(new ReplaySubject(1)));\n        connectableGeocoder$.connect(); // ignore the subscription\n        // since we will remain subscribed till application exits\n        this.geocoder$ = connectableGeocoder$;\n    }\n    geocode(request) {\n        return this.geocoder$.pipe(switchMap((geocoder) => this._getGoogleResults(geocoder, request)));\n    }\n    _getGoogleResults(geocoder, request) {\n        const geocodeObservable = bindCallback(geocoder.geocode);\n        return geocodeObservable(request).pipe(switchMap(([results, status]) => {\n            if (status === google.maps.GeocoderStatus.OK) {\n                return of(results);\n            }\n            return throwError(status);\n        }));\n    }\n    _createGeocoder() {\n        return new google.maps.Geocoder();\n    }\n}\nAgmGeocoder.ɵfac = function AgmGeocoder_Factory(t) { return new (t || AgmGeocoder)(ɵngcc0.ɵɵinject(MapsAPILoader)); };\nAgmGeocoder.ɵprov = ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(ɵɵinject(MapsAPILoader)); }, token: AgmGeocoder, providedIn: \"root\" });\nAgmGeocoder.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmGeocoder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MapsAPILoader }]; }, null); })();\n\nclass WindowRef {\n    getNativeWindow() { return window; }\n}\nclass DocumentRef {\n    getNativeDocument() { return document; }\n}\nconst BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\n\nvar GoogleMapsScriptProtocol;\n(function (GoogleMapsScriptProtocol) {\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nconst LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\nclass LazyMapsAPILoader extends MapsAPILoader {\n    constructor(config = null, w, d, localeId) {\n        super();\n        this.localeId = localeId;\n        this._SCRIPT_ID = 'agmGoogleMapsApiScript';\n        this.callbackName = `agmLazyMapsAPILoader`;\n        this._config = config || {};\n        this._windowRef = w;\n        this._documentRef = d;\n    }\n    load() {\n        const window = this._windowRef.getNativeWindow();\n        if (window.google && window.google.maps) {\n            // Google maps already loaded on the page.\n            return Promise.resolve();\n        }\n        if (this._scriptLoadingPromise) {\n            return this._scriptLoadingPromise;\n        }\n        // this can happen in HMR situations or Stackblitz.io editors.\n        const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n        if (scriptOnPage) {\n            this._assignScriptLoadingPromise(scriptOnPage);\n            return this._scriptLoadingPromise;\n        }\n        const script = this._documentRef.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.id = this._SCRIPT_ID;\n        script.src = this._getScriptSrc(this.callbackName);\n        this._assignScriptLoadingPromise(script);\n        this._documentRef.getNativeDocument().body.appendChild(script);\n        return this._scriptLoadingPromise;\n    }\n    _assignScriptLoadingPromise(scriptElem) {\n        this._scriptLoadingPromise = new Promise((resolve, reject) => {\n            this._windowRef.getNativeWindow()[this.callbackName] = () => {\n                resolve();\n            };\n            scriptElem.onerror = (error) => {\n                reject(error);\n            };\n        });\n    }\n    _getScriptSrc(callbackName) {\n        const protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n        let protocol;\n        switch (protocolType) {\n            case GoogleMapsScriptProtocol.AUTO:\n                protocol = '';\n                break;\n            case GoogleMapsScriptProtocol.HTTP:\n                protocol = 'http:';\n                break;\n            case GoogleMapsScriptProtocol.HTTPS:\n                protocol = 'https:';\n                break;\n        }\n        const hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        const queryParams = {\n            v: this._config.apiVersion || 'quarterly',\n            callback: callbackName,\n            key: this._config.apiKey,\n            client: this._config.clientId,\n            channel: this._config.channel,\n            libraries: this._config.libraries,\n            region: this._config.region,\n            language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null),\n        };\n        const params = Object.keys(queryParams)\n            .filter((k) => queryParams[k] != null)\n            .filter((k) => {\n            // remove empty arrays\n            return !Array.isArray(queryParams[k]) ||\n                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n        })\n            .map((k) => {\n            // join arrays as comma seperated strings\n            const i = queryParams[k];\n            if (Array.isArray(i)) {\n                return { key: k, value: i.join(',') };\n            }\n            return { key: k, value: queryParams[k] };\n        })\n            .map((entry) => {\n            return `${entry.key}=${entry.value}`;\n        })\n            .join('&');\n        return `${protocol}//${hostAndPath}?${params}`;\n    }\n}\nLazyMapsAPILoader.ɵfac = function LazyMapsAPILoader_Factory(t) { return new (t || LazyMapsAPILoader)(ɵngcc0.ɵɵinject(LAZY_MAPS_API_CONFIG, 8), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject(DocumentRef), ɵngcc0.ɵɵinject(LOCALE_ID)); };\nLazyMapsAPILoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LazyMapsAPILoader, factory: LazyMapsAPILoader.ɵfac });\nLazyMapsAPILoader.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },\n    { type: WindowRef },\n    { type: DocumentRef },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyMapsAPILoader, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LAZY_MAPS_API_CONFIG]\n            }] }, { type: WindowRef }, { type: DocumentRef }, { type: String, decorators: [{\n                type: Inject,\n                args: [LOCALE_ID]\n            }] }]; }, null); })();\n\nclass MarkerManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markers = new Map();\n    }\n    convertAnimation(uiAnim) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (uiAnim === null) {\n                return null;\n            }\n            else {\n                return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n            }\n        });\n    }\n    deleteMarker(markerDirective) {\n        const markerPromise = this._markers.get(markerDirective);\n        if (markerPromise == null) {\n            // marker already deleted\n            return Promise.resolve();\n        }\n        return markerPromise.then((marker) => {\n            return this._zone.run(() => {\n                marker.setMap(null);\n                this._markers.delete(markerDirective);\n            });\n        });\n    }\n    updateMarkerPosition(marker) {\n        return this._markers.get(marker).then((m) => m.setPosition({ lat: marker.latitude, lng: marker.longitude }));\n    }\n    updateTitle(marker) {\n        return this._markers.get(marker).then((m) => m.setTitle(marker.title));\n    }\n    updateLabel(marker) {\n        return this._markers.get(marker).then((m) => { m.setLabel(marker.label); });\n    }\n    updateDraggable(marker) {\n        return this._markers.get(marker).then((m) => m.setDraggable(marker.draggable));\n    }\n    updateIcon(marker) {\n        return this._markers.get(marker).then((m) => m.setIcon(marker.iconUrl));\n    }\n    updateOpacity(marker) {\n        return this._markers.get(marker).then((m) => m.setOpacity(marker.opacity));\n    }\n    updateVisible(marker) {\n        return this._markers.get(marker).then((m) => m.setVisible(marker.visible));\n    }\n    updateZIndex(marker) {\n        return this._markers.get(marker).then((m) => m.setZIndex(marker.zIndex));\n    }\n    updateClickable(marker) {\n        return this._markers.get(marker).then((m) => m.setClickable(marker.clickable));\n    }\n    updateAnimation(marker) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const m = yield this._markers.get(marker);\n            m.setAnimation(yield this.convertAnimation(marker.animation));\n        });\n    }\n    addMarker(marker) {\n        const markerPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            return this._mapsWrapper.createMarker({\n                position: { lat: marker.latitude, lng: marker.longitude },\n                label: marker.label,\n                draggable: marker.draggable,\n                icon: marker.iconUrl,\n                opacity: marker.opacity,\n                visible: marker.visible,\n                zIndex: marker.zIndex,\n                title: marker.title,\n                clickable: marker.clickable,\n                animation: yield this.convertAnimation(marker.animation),\n            }).then(resolve);\n        }));\n        this._markers.set(marker, markerPromise);\n    }\n    getNativeMarker(marker) {\n        return this._markers.get(marker);\n    }\n    createEventObservable(eventName, marker) {\n        return new Observable(observer => {\n            this._markers.get(marker).then(m => m.addListener(eventName, e => this._zone.run(() => observer.next(e))));\n        });\n    }\n}\nMarkerManager.ɵfac = function MarkerManager_Factory(t) { return new (t || MarkerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nMarkerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MarkerManager, factory: MarkerManager.ɵfac });\nMarkerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MarkerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nclass InfoWindowManager {\n    constructor(_mapsWrapper, _zone, _markerManager) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markerManager = _markerManager;\n        this._infoWindows = new Map();\n    }\n    deleteInfoWindow(infoWindow) {\n        const iWindow = this._infoWindows.get(infoWindow);\n        if (iWindow == null) {\n            // info window already deleted\n            return Promise.resolve();\n        }\n        return iWindow.then((i) => {\n            return this._zone.run(() => {\n                i.close();\n                this._infoWindows.delete(infoWindow);\n            });\n        });\n    }\n    setPosition(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setPosition({\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude,\n        }));\n    }\n    setZIndex(infoWindow) {\n        return this._infoWindows.get(infoWindow)\n            .then((i) => i.setZIndex(infoWindow.zIndex));\n    }\n    open(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => {\n            if (infoWindow.hostMarker != null) {\n                return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n                    return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n                });\n            }\n            return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n        });\n    }\n    close(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => w.close());\n    }\n    setOptions(infoWindow, options) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setOptions(options));\n    }\n    addInfoWindow(infoWindow) {\n        const options = {\n            content: infoWindow.content,\n            maxWidth: infoWindow.maxWidth,\n            zIndex: infoWindow.zIndex,\n            disableAutoPan: infoWindow.disableAutoPan,\n        };\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n            options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };\n        }\n        const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n        this._infoWindows.set(infoWindow, infoWindowPromise);\n    }\n    /**\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\n     */\n    createEventObservable(eventName, infoWindow) {\n        return new Observable((observer) => {\n            this._infoWindows.get(infoWindow).then((i) => {\n                i.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n}\nInfoWindowManager.ɵfac = function InfoWindowManager_Factory(t) { return new (t || InfoWindowManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(MarkerManager)); };\nInfoWindowManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InfoWindowManager, factory: InfoWindowManager.ɵfac });\nInfoWindowManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone },\n    { type: MarkerManager }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InfoWindowManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }, { type: MarkerManager }]; }, null); })();\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\nclass KmlLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new KML Layer to the map.\n     */\n    addKmlLayer(layer) {\n        const newLayer = this._wrapper.getNativeMap().then(m => {\n            return new google.maps.KmlLayer({\n                clickable: layer.clickable,\n                map: m,\n                preserveViewport: layer.preserveViewport,\n                screenOverlays: layer.screenOverlays,\n                suppressInfoWindows: layer.suppressInfoWindows,\n                url: layer.url,\n                zIndex: layer.zIndex,\n            });\n        });\n        this._layers.set(layer, newLayer);\n    }\n    setOptions(layer, options) {\n        this._layers.get(layer).then(l => l.setOptions(options));\n    }\n    deleteKmlLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((m) => {\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n}\nKmlLayerManager.ɵfac = function KmlLayerManager_Factory(t) { return new (t || KmlLayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nKmlLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: KmlLayerManager, factory: KmlLayerManager.ɵfac });\nKmlLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KmlLayerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\nclass LayerManager {\n    constructor(_wrapper) {\n        this._wrapper = _wrapper;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map instance.\n     * @param layer - a TransitLayer object\n     * @param _options - TransitLayerOptions options\n     * @returns void\n     */\n    addTransitLayer(layer) {\n        const newLayer = this._wrapper.createTransitLayer();\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param layer - a bicycling layer object\n     * @param _options - BicyclingLayer options\n     * @returns void\n     */\n    addBicyclingLayer(layer) {\n        const newLayer = this._wrapper.createBicyclingLayer();\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Deletes a map layer\n     * @param layer - the layer to delete\n     */\n    deleteLayer(layer) {\n        return this._layers.get(layer).then(currentLayer => {\n            currentLayer.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n}\nLayerManager.ɵfac = function LayerManager_Factory(t) { return new (t || LayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper)); };\nLayerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LayerManager, factory: LayerManager.ɵfac });\nLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayerManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }]; }, null); })();\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nclass NoOpMapsAPILoader {\n    load() {\n        if (!window.google || !window.google.maps) {\n            throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n        }\n        return Promise.resolve();\n    }\n}\n\nfunction createMVCEventObservable(array) {\n    const eventNames = ['insert_at', 'remove_at', 'set_at'];\n    return fromEventPattern(handler => eventNames.map(eventName => array.addListener(eventName, (index, previous) => handler.apply(array, [{ newArr: array.getArray(), eventName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));\n}\nclass MvcArrayMock {\n    constructor() {\n        this.vals = [];\n        this.listeners = {\n            remove_at: [],\n            insert_at: [],\n            set_at: [],\n        };\n    }\n    clear() {\n        for (let i = this.vals.length - 1; i >= 0; i--) {\n            this.removeAt(i);\n        }\n    }\n    getArray() {\n        return [...this.vals];\n    }\n    getAt(i) {\n        return this.vals[i];\n    }\n    getLength() {\n        return this.vals.length;\n    }\n    insertAt(i, elem) {\n        this.vals.splice(i, 0, elem);\n        this.listeners.insert_at.forEach(listener => listener(i));\n    }\n    pop() {\n        const deleted = this.vals.pop();\n        this.listeners.remove_at.forEach(listener => listener(this.vals.length, deleted));\n        return deleted;\n    }\n    push(elem) {\n        this.vals.push(elem);\n        this.listeners.insert_at.forEach(listener => listener(this.vals.length - 1));\n        return this.vals.length;\n    }\n    removeAt(i) {\n        const deleted = this.vals.splice(i, 1)[0];\n        this.listeners.remove_at.forEach(listener => listener(i, deleted));\n        return deleted;\n    }\n    setAt(i, elem) {\n        const deleted = this.vals[i];\n        this.vals[i] = elem;\n        this.listeners.set_at.forEach(listener => listener(i, deleted));\n    }\n    forEach(callback) {\n        this.vals.forEach(callback);\n    }\n    addListener(eventName, handler) {\n        const listenerArr = this.listeners[eventName];\n        listenerArr.push(handler);\n        return {\n            remove: () => {\n                listenerArr.splice(listenerArr.indexOf(handler), 1);\n            },\n        };\n    }\n    bindTo() { throw new Error('Not implemented'); }\n    changed() { throw new Error('Not implemented'); }\n    get() { throw new Error('Not implemented'); }\n    notify() { throw new Error('Not implemented'); }\n    set() { throw new Error('Not implemented'); }\n    setValues() { throw new Error('Not implemented'); }\n    unbind() { throw new Error('Not implemented'); }\n    unbindAll() { throw new Error('Not implemented'); }\n}\n\nclass PolygonManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polygons = new Map();\n    }\n    addPolygon(path) {\n        const polygonPromise = this._mapsWrapper.createPolygon({\n            clickable: path.clickable,\n            draggable: path.draggable,\n            editable: path.editable,\n            fillColor: path.fillColor,\n            fillOpacity: path.fillOpacity,\n            geodesic: path.geodesic,\n            paths: path.paths,\n            strokeColor: path.strokeColor,\n            strokeOpacity: path.strokeOpacity,\n            strokeWeight: path.strokeWeight,\n            visible: path.visible,\n            zIndex: path.zIndex,\n        });\n        this._polygons.set(path, polygonPromise);\n    }\n    updatePolygon(polygon) {\n        const m = this._polygons.get(polygon);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n    }\n    setPolygonOptions(path, options) {\n        return this._polygons.get(path).then((l) => { l.setOptions(options); });\n    }\n    deletePolygon(paths) {\n        const m = this._polygons.get(paths);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polygons.delete(paths);\n            });\n        });\n    }\n    getPath(polygonDirective) {\n        return this._polygons.get(polygonDirective)\n            .then((polygon) => polygon.getPath().getArray());\n    }\n    getPaths(polygonDirective) {\n        return this._polygons.get(polygonDirective)\n            .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\n    }\n    createEventObservable(eventName, path) {\n        return new Observable((observer) => {\n            this._polygons.get(path).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(agmPolygon) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polygon = yield this._polygons.get(agmPolygon);\n            const paths = polygon.getPaths();\n            const pathsChanges$ = createMVCEventObservable(paths);\n            return pathsChanges$.pipe(startWith({ newArr: paths.getArray() }), // in order to subscribe to them all\n            switchMap(parentMVEvent => merge(... // rest parameter\n            parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC)\n                .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\n                .pipe(// start the merged ob with an event signinifing change to parent\n            startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), skip(1), // skip the manually added event\n            map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\n                let retVal;\n                if (!chMVCEvent) {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        eventName: parentMVEvent.eventName,\n                        index: parentMVEvent.index,\n                    };\n                    if (parentMVEvent.previous) {\n                        retVal.previous = parentMVEvent.previous.getArray();\n                    }\n                }\n                else {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        pathIndex,\n                        eventName: chMVCEvent.eventName,\n                        index: chMVCEvent.index,\n                    };\n                    if (chMVCEvent.previous) {\n                        retVal.previous = chMVCEvent.previous;\n                    }\n                }\n                return retVal;\n            }));\n        });\n    }\n}\nPolygonManager.ɵfac = function PolygonManager_Factory(t) { return new (t || PolygonManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nPolygonManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PolygonManager, factory: PolygonManager.ɵfac });\nPolygonManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolygonManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nclass PolylineManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polylines = new Map();\n    }\n    static _convertPoints(line) {\n        const path = line._getPoints().map((point) => {\n            return { lat: point.latitude, lng: point.longitude };\n        });\n        return path;\n    }\n    static _convertPath(path) {\n        const symbolPath = google.maps.SymbolPath[path];\n        if (typeof symbolPath === 'number') {\n            return symbolPath;\n        }\n        else {\n            return path;\n        }\n    }\n    static _convertIcons(line) {\n        const icons = line._getIcons().map(agmIcon => ({\n            fixedRotation: agmIcon.fixedRotation,\n            offset: agmIcon.offset,\n            repeat: agmIcon.repeat,\n            icon: {\n                anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n                fillColor: agmIcon.fillColor,\n                fillOpacity: agmIcon.fillOpacity,\n                path: PolylineManager._convertPath(agmIcon.path),\n                rotation: agmIcon.rotation,\n                scale: agmIcon.scale,\n                strokeColor: agmIcon.strokeColor,\n                strokeOpacity: agmIcon.strokeOpacity,\n                strokeWeight: agmIcon.strokeWeight,\n            },\n        }));\n        // prune undefineds;\n        icons.forEach(icon => {\n            Object.entries(icon).forEach(([key, val]) => {\n                if (typeof val === 'undefined') {\n                    delete icon[key];\n                }\n            });\n            if (typeof icon.icon.anchor.x === 'undefined' ||\n                typeof icon.icon.anchor.y === 'undefined') {\n                delete icon.icon.anchor;\n            }\n        });\n        return icons;\n    }\n    addPolyline(line) {\n        const polylinePromise = this._mapsWrapper.getNativeMap()\n            .then(() => [PolylineManager._convertPoints(line),\n            PolylineManager._convertIcons(line)])\n            .then(([path, icons]) => this._mapsWrapper.createPolyline({\n            clickable: line.clickable,\n            draggable: line.draggable,\n            editable: line.editable,\n            geodesic: line.geodesic,\n            strokeColor: line.strokeColor,\n            strokeOpacity: line.strokeOpacity,\n            strokeWeight: line.strokeWeight,\n            visible: line.visible,\n            zIndex: line.zIndex,\n            path,\n            icons,\n        }));\n        this._polylines.set(line, polylinePromise);\n    }\n    updatePolylinePoints(line) {\n        const path = PolylineManager._convertPoints(line);\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => this._zone.run(() => l.setPath(path)));\n    }\n    updateIconSequences(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._mapsWrapper.getNativeMap();\n            const icons = PolylineManager._convertIcons(line);\n            const m = this._polylines.get(line);\n            if (m == null) {\n                return;\n            }\n            return m.then(l => this._zone.run(() => l.setOptions({ icons })));\n        });\n    }\n    setPolylineOptions(line, options) {\n        return this._polylines.get(line).then((l) => { l.setOptions(options); });\n    }\n    deletePolyline(line) {\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polylines.delete(line);\n            });\n        });\n    }\n    getMVCPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polyline = yield this._polylines.get(agmPolyline);\n            return polyline.getPath();\n        });\n    }\n    getPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getMVCPath(agmPolyline)).getArray();\n        });\n    }\n    createEventObservable(eventName, line) {\n        return new Observable((observer) => {\n            this._polylines.get(line).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mvcPath = yield this.getMVCPath(line);\n            return createMVCEventObservable(mvcPath);\n        });\n    }\n}\nPolylineManager.ɵfac = function PolylineManager_Factory(t) { return new (t || PolylineManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nPolylineManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PolylineManager, factory: PolylineManager.ɵfac });\nPolylineManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolylineManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nclass RectangleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._rectangles = new Map();\n    }\n    addRectangle(rectangle) {\n        this._apiWrapper.getNativeMap().then(() => this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n            bounds: {\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            },\n            clickable: rectangle.clickable,\n            draggable: rectangle.draggable,\n            editable: rectangle.editable,\n            fillColor: rectangle.fillColor,\n            fillOpacity: rectangle.fillOpacity,\n            strokeColor: rectangle.strokeColor,\n            strokeOpacity: rectangle.strokeOpacity,\n            strokePosition: google.maps.StrokePosition[rectangle.strokePosition],\n            strokeWeight: rectangle.strokeWeight,\n            visible: rectangle.visible,\n            zIndex: rectangle.zIndex,\n        })));\n    }\n    /**\n     * Removes the given rectangle from the map.\n     */\n    removeRectangle(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            r.setMap(null);\n            this._rectangles.delete(rectangle);\n        });\n    }\n    setOptions(rectangle, options) {\n        return this._rectangles.get(rectangle).then((r) => {\n            const actualStrokePosition = options.strokePosition;\n            options.strokePosition = google.maps.StrokePosition[actualStrokePosition];\n            r.setOptions(options);\n        });\n    }\n    getBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => r.getBounds());\n    }\n    setBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setBounds({\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            });\n        });\n    }\n    setEditable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setEditable(rectangle.editable);\n        });\n    }\n    setDraggable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setDraggable(rectangle.draggable);\n        });\n    }\n    setVisible(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setVisible(rectangle.visible);\n        });\n    }\n    createEventObservable(eventName, rectangle) {\n        return new Observable((subsrciber) => {\n            let listener = null;\n            this._rectangles.get(rectangle).then((r) => {\n                listener = r.addListener(eventName, (e) => this._zone.run(() => subsrciber.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n}\nRectangleManager.ɵfac = function RectangleManager_Factory(t) { return new (t || RectangleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nRectangleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RectangleManager, factory: RectangleManager.ɵfac });\nRectangleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RectangleManager, [{\n        type: Injectable\n    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nlet layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\nclass AgmBicyclingLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId++).toString();\n        /**\n         * Hide/show bicycling layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this);\n        this._addedToManager = true;\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmBicyclingLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n}\nAgmBicyclingLayer.ɵfac = function AgmBicyclingLayer_Factory(t) { return new (t || AgmBicyclingLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager)); };\nAgmBicyclingLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmBicyclingLayer, selectors: [[\"agm-bicycling-layer\"]], inputs: { visible: \"visible\" } });\nAgmBicyclingLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\nAgmBicyclingLayer.propDecorators = {\n    visible: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmBicyclingLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-bicycling-layer'\n            }]\n    }], function () { return [{ type: LayerManager }]; }, { visible: [{\n            type: Input\n        }] }); })();\n\nclass AgmCircle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Circle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this circle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this circle by dragging the control points shown at\n         * the center and around the circumference of the circle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The radius in meters on the Earth's surface.\n         */\n        this.radius = 0;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this circle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the circle's center is changed.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the circle.\n         */\n        // tslint:disable-next-line: no-output-native\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the circle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the circle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the circle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the circle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on circle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on circle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the circle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the circle's radius is changed.\n         */\n        this.radiusChange = new EventEmitter();\n        /**\n         * This event is fired when the circle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._circleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addCircle(this);\n        this._circleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._circleAddedToManager) {\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] || changes['longitude']) {\n            this._manager.setCenter(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        if (changes['radius']) {\n            this._manager.setRadius(this);\n        }\n        // tslint:enable: no-string-literal\n        this._updateCircleOptionsChanges(changes);\n    }\n    _updateCircleOptionsChanges(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmCircle._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        const events = new Map();\n        events.set('center_changed', this.centerChange);\n        events.set('click', this.circleClick);\n        events.set('dblclick', this.circleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragstart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('radius_changed', this.radiusChange);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe((value) => {\n                switch (eventName) {\n                    case 'radius_changed':\n                        this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                        break;\n                    case 'center_changed':\n                        this._manager.getCenter(this).then((center) => eventEmitter.emit({ lat: center.lat(), lng: center.lng() }));\n                        break;\n                    default:\n                        eventEmitter.emit(value);\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(s => s.unsubscribe());\n        this._eventSubscriptions = null;\n        this._manager.removeCircle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Circle.\n     */\n    getBounds() { return this._manager.getBounds(this); }\n    getCenter() { return this._manager.getCenter(this); }\n}\nAgmCircle.ɵfac = function AgmCircle_Factory(t) { return new (t || AgmCircle)(ɵngcc0.ɵɵdirectiveInject(CircleManager)); };\nAgmCircle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmCircle, selectors: [[\"agm-circle\"]], inputs: { clickable: \"clickable\", draggable: [\"circleDraggable\", \"draggable\"], editable: \"editable\", radius: \"radius\", strokePosition: \"strokePosition\", strokeWeight: \"strokeWeight\", visible: \"visible\", latitude: \"latitude\", longitude: \"longitude\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", zIndex: \"zIndex\" }, outputs: { centerChange: \"centerChange\", circleClick: \"circleClick\", circleDblClick: \"circleDblClick\", drag: \"drag\", dragEnd: \"dragEnd\", dragStart: \"dragStart\", mouseDown: \"mouseDown\", mouseMove: \"mouseMove\", mouseOut: \"mouseOut\", mouseOver: \"mouseOver\", mouseUp: \"mouseUp\", radiusChange: \"radiusChange\", rightClick: \"rightClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmCircle._mapOptions = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable',\n];\nAgmCircle.ctorParameters = () => [\n    { type: CircleManager }\n];\nAgmCircle.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['circleDraggable',] }],\n    editable: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    radius: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokePosition: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    centerChange: [{ type: Output }],\n    circleClick: [{ type: Output }],\n    circleDblClick: [{ type: Output }],\n    drag: [{ type: Output }],\n    dragEnd: [{ type: Output }],\n    dragStart: [{ type: Output }],\n    mouseDown: [{ type: Output }],\n    mouseMove: [{ type: Output }],\n    mouseOut: [{ type: Output }],\n    mouseOver: [{ type: Output }],\n    mouseUp: [{ type: Output }],\n    radiusChange: [{ type: Output }],\n    rightClick: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmCircle, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-circle'\n            }]\n    }], function () { return [{ type: CircleManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['circleDraggable']\n        }], editable: [{\n            type: Input\n        }], radius: [{\n            type: Input\n        }], strokePosition: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], centerChange: [{\n            type: Output\n        }], circleClick: [{\n            type: Output\n        }], circleDblClick: [{\n            type: Output\n        }], drag: [{\n            type: Output\n        }], dragEnd: [{\n            type: Output\n        }], dragStart: [{\n            type: Output\n        }], mouseDown: [{\n            type: Output\n        }], mouseMove: [{\n            type: Output\n        }], mouseOut: [{\n            type: Output\n        }], mouseOver: [{\n            type: Output\n        }], mouseUp: [{\n            type: Output\n        }], radiusChange: [{\n            type: Output\n        }], rightClick: [{\n            type: Output\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }] }); })();\n\nlet layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\nclass AgmDataLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$1++).toString();\n        this._subscriptions = [];\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * The geoJson to be displayed\n         */\n        this.geoJson = null;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addDataLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmDataLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteDataLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        // tslint:disable-next-line: no-string-literal\n        const geoJsonChange = changes['geoJson'];\n        if (geoJsonChange) {\n            this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n        }\n        const dataOptions = AgmDataLayer._dataOptionsAttributes.reduce((options, k) => options[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : this[k], {});\n        this._manager.setDataOptions(this, dataOptions);\n    }\n}\nAgmDataLayer.ɵfac = function AgmDataLayer_Factory(t) { return new (t || AgmDataLayer)(ɵngcc0.ɵɵdirectiveInject(DataLayerManager)); };\nAgmDataLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmDataLayer, selectors: [[\"agm-data-layer\"]], inputs: { geoJson: \"geoJson\", style: \"style\" }, outputs: { layerClick: \"layerClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmDataLayer._dataOptionsAttributes = ['style'];\nAgmDataLayer.ctorParameters = () => [\n    { type: DataLayerManager }\n];\nAgmDataLayer.propDecorators = {\n    layerClick: [{ type: Output }],\n    geoJson: [{ type: Input }],\n    style: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmDataLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-data-layer'\n            }]\n    }], function () { return [{ type: DataLayerManager }]; }, { layerClick: [{\n            type: Output\n        }], geoJson: [{\n            type: Input\n        }], style: [{\n            type: Input\n        }] }); })();\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\nclass AgmFitBounds {\n    constructor(_fitBoundsAccessor, _fitBoundsService) {\n        this._fitBoundsAccessor = _fitBoundsAccessor;\n        this._fitBoundsService = _fitBoundsService;\n        /**\n         * If the value is true, the element gets added to the bounds of the map.\n         * Default: true.\n         */\n        this.agmFitBounds = true;\n        this._destroyed$ = new Subject();\n        this._latestFitBoundsDetails = null;\n    }\n    /**\n     * @internal\n     */\n    ngOnChanges() {\n        this._updateBounds();\n    }\n    /**\n     * @internal\n     */\n    ngOnInit() {\n        this._fitBoundsAccessor\n            .getFitBoundsDetails$()\n            .pipe(distinctUntilChanged((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), takeUntil(this._destroyed$))\n            .subscribe(details => this._updateBounds(details));\n    }\n    /*\n     Either the location changed, or visible status changed.\n     Possible state changes are\n     invisible -> visible\n     visible -> invisible\n     visible -> visible (new location)\n    */\n    _updateBounds(newFitBoundsDetails) {\n        // either visibility will change, or location, so remove the old one anyway\n        if (this._latestFitBoundsDetails) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n            // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n            // true -> false -> true, in which case we still need old value cached here\n        }\n        if (newFitBoundsDetails) {\n            this._latestFitBoundsDetails = newFitBoundsDetails;\n        }\n        if (!this._latestFitBoundsDetails) {\n            return;\n        }\n        if (this.agmFitBounds === true) {\n            this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._destroyed$.next();\n        this._destroyed$.complete();\n        if (this._latestFitBoundsDetails !== null) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n}\nAgmFitBounds.ɵfac = function AgmFitBounds_Factory(t) { return new (t || AgmFitBounds)(ɵngcc0.ɵɵdirectiveInject(FitBoundsAccessor, 2), ɵngcc0.ɵɵdirectiveInject(FitBoundsService)); };\nAgmFitBounds.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmFitBounds, selectors: [[\"\", \"agmFitBounds\", \"\"]], inputs: { agmFitBounds: \"agmFitBounds\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmFitBounds.ctorParameters = () => [\n    { type: FitBoundsAccessor, decorators: [{ type: Self }] },\n    { type: FitBoundsService }\n];\nAgmFitBounds.propDecorators = {\n    agmFitBounds: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmFitBounds, [{\n        type: Directive,\n        args: [{\n                selector: '[agmFitBounds]'\n            }]\n    }], function () { return [{ type: FitBoundsAccessor, decorators: [{\n                type: Self\n            }] }, { type: FitBoundsService }]; }, { agmFitBounds: [{\n            type: Input\n        }] }); })();\n\nlet infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmInfoWindow {\n    constructor(_infoWindowManager, _el) {\n        this._infoWindowManager = _infoWindowManager;\n        this._el = _el;\n        /**\n         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n         */\n        this.isOpen = false;\n        /**\n         * Emits an event when the info window is closed.\n         */\n        this.infoWindowClose = new EventEmitter();\n        this._infoWindowAddedToManager = false;\n        this._id = (infoWindowId++).toString();\n    }\n    ngOnInit() {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n        this._infoWindowManager.addInfoWindow(this);\n        this._infoWindowAddedToManager = true;\n        this._updateOpenState();\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._infoWindowAddedToManager) {\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n            typeof this.longitude === 'number') {\n            this._infoWindowManager.setPosition(this);\n        }\n        if (changes['zIndex']) {\n            this._infoWindowManager.setZIndex(this);\n        }\n        if (changes['isOpen']) {\n            this._updateOpenState();\n        }\n        this._setInfoWindowOptions(changes);\n    }\n    // tslint:enable: no-string-literal\n    _registerEventListeners() {\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n            this.isOpen = false;\n            this.infoWindowClose.emit();\n        });\n    }\n    _updateOpenState() {\n        this.isOpen ? this.open() : this.close();\n    }\n    _setInfoWindowOptions(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._infoWindowManager.setOptions(this, options);\n    }\n    /**\n     * Opens the info window.\n     */\n    open() { return this._infoWindowManager.open(this); }\n    /**\n     * Closes the info window.\n     */\n    close() {\n        return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmInfoWindow-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n}\nAgmInfoWindow.ɵfac = function AgmInfoWindow_Factory(t) { return new (t || AgmInfoWindow)(ɵngcc0.ɵɵdirectiveInject(InfoWindowManager), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nAgmInfoWindow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AgmInfoWindow, selectors: [[\"agm-info-window\"]], inputs: { isOpen: \"isOpen\", latitude: \"latitude\", longitude: \"longitude\", disableAutoPan: \"disableAutoPan\", zIndex: \"zIndex\", maxWidth: \"maxWidth\" }, outputs: { infoWindowClose: \"infoWindowClose\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"agm-info-window-content\"]], template: function AgmInfoWindow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2 });\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\nAgmInfoWindow.ctorParameters = () => [\n    { type: InfoWindowManager },\n    { type: ElementRef }\n];\nAgmInfoWindow.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    disableAutoPan: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    maxWidth: [{ type: Input }],\n    isOpen: [{ type: Input }],\n    infoWindowClose: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmInfoWindow, [{\n        type: Component,\n        args: [{\n                selector: 'agm-info-window',\n                template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n            }]\n    }], function () { return [{ type: InfoWindowManager }, { type: ɵngcc0.ElementRef }]; }, { isOpen: [{\n            type: Input\n        }], infoWindowClose: [{\n            type: Output\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }], disableAutoPan: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], maxWidth: [{\n            type: Input\n        }] }); })();\n\nlet layerId$2 = 0;\nclass AgmKmlLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$2++).toString();\n        this._subscriptions = [];\n        /**\n         * If true, the layer receives mouse events. Default value is true.\n         */\n        this.clickable = true;\n        /**\n         * By default, the input map is centered and zoomed to the bounding box of the contents of the\n         * layer.\n         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n         * were never set.\n         */\n        this.preserveViewport = false;\n        /**\n         * Whether to render the screen overlays. Default true.\n         */\n        this.screenOverlays = true;\n        /**\n         * Suppress the rendering of info windows when layer features are clicked.\n         */\n        this.suppressInfoWindows = false;\n        /**\n         * The URL of the KML document to display.\n         */\n        this.url = null;\n        /**\n         * The z-index of the layer.\n         */\n        this.zIndex = null;\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * This event is fired when the KML layers default viewport has changed.\n         */\n        this.defaultViewportChange = new EventEmitter();\n        /**\n         * This event is fired when the KML layer has finished loading.\n         * At this point it is safe to read the status property to determine if the layer loaded\n         * successfully.\n         */\n        this.statusChange = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addKmlLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        this._updatePolygonOptions(changes);\n    }\n    _updatePolygonOptions(changes) {\n        const options = Object.keys(changes)\n            .filter(k => AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n        if (Object.keys(options).length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n            { name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit() },\n            { name: 'status_changed', handler: () => this.statusChange.emit() },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmKmlLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteKmlLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n}\nAgmKmlLayer.ɵfac = function AgmKmlLayer_Factory(t) { return new (t || AgmKmlLayer)(ɵngcc0.ɵɵdirectiveInject(KmlLayerManager)); };\nAgmKmlLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmKmlLayer, selectors: [[\"agm-kml-layer\"]], inputs: { clickable: \"clickable\", preserveViewport: \"preserveViewport\", screenOverlays: \"screenOverlays\", suppressInfoWindows: \"suppressInfoWindows\", url: \"url\", zIndex: \"zIndex\" }, outputs: { layerClick: \"layerClick\", defaultViewportChange: \"defaultViewportChange\", statusChange: \"statusChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\nAgmKmlLayer.ctorParameters = () => [\n    { type: KmlLayerManager }\n];\nAgmKmlLayer.propDecorators = {\n    clickable: [{ type: Input }],\n    preserveViewport: [{ type: Input }],\n    screenOverlays: [{ type: Input }],\n    suppressInfoWindows: [{ type: Input }],\n    url: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    layerClick: [{ type: Output }],\n    defaultViewportChange: [{ type: Output }],\n    statusChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmKmlLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-kml-layer'\n            }]\n    }], function () { return [{ type: KmlLayerManager }]; }, { clickable: [{\n            type: Input\n        }], preserveViewport: [{\n            type: Input\n        }], screenOverlays: [{\n            type: Input\n        }], suppressInfoWindows: [{\n            type: Input\n        }], url: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], layerClick: [{\n            type: Output\n        }], defaultViewportChange: [{\n            type: Output\n        }], statusChange: [{\n            type: Output\n        }] }); })();\n\nclass AgmMapControl {\n}\nAgmMapControl.ɵfac = function AgmMapControl_Factory(t) { return new (t || AgmMapControl)(); };\nAgmMapControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmMapControl, inputs: { position: \"position\" } });\nAgmMapControl.propDecorators = {\n    position: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmMapControl, [{\n        type: Directive\n    }], null, { position: [{\n            type: Input\n        }] }); })();\nclass AgmFullscreenControl extends AgmMapControl {\n    getOptions() {\n        return {\n            fullscreenControl: true,\n            fullscreenControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmFullscreenControl.ɵfac = function AgmFullscreenControl_Factory(t) { return ɵAgmFullscreenControl_BaseFactory(t || AgmFullscreenControl); };\nAgmFullscreenControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmFullscreenControl, selectors: [[\"agm-fullscreen-control\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: AgmMapControl, useExisting: AgmFullscreenControl }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵAgmFullscreenControl_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AgmFullscreenControl);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmFullscreenControl, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-map agm-fullscreen-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmFullscreenControl }]\n            }]\n    }], null, null); })();\nclass AgmMapTypeControl extends AgmMapControl {\n    getOptions() {\n        return {\n            mapTypeControl: true,\n            mapTypeControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n                style: this.style && google.maps.MapTypeControlStyle[this.style],\n                mapTypeIds: this.mapTypeIds && this.mapTypeIds.map(mapTypeId => google.maps.MapTypeId[mapTypeId]),\n            },\n        };\n    }\n}\nAgmMapTypeControl.ɵfac = function AgmMapTypeControl_Factory(t) { return ɵAgmMapTypeControl_BaseFactory(t || AgmMapTypeControl); };\nAgmMapTypeControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmMapTypeControl, selectors: [[\"agm-map-type-control\"]], inputs: { mapTypeIds: \"mapTypeIds\", style: \"style\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: AgmMapControl, useExisting: AgmMapTypeControl }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nAgmMapTypeControl.propDecorators = {\n    mapTypeIds: [{ type: Input }],\n    style: [{ type: Input }]\n};\nconst ɵAgmMapTypeControl_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AgmMapTypeControl);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmMapTypeControl, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-map agm-map-type-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmMapTypeControl }]\n            }]\n    }], null, { mapTypeIds: [{\n            type: Input\n        }], style: [{\n            type: Input\n        }] }); })();\nclass AgmPanControl extends AgmMapControl {\n    getOptions() {\n        return {\n            panControl: true,\n            panControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmPanControl.ɵfac = function AgmPanControl_Factory(t) { return ɵAgmPanControl_BaseFactory(t || AgmPanControl); };\nAgmPanControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPanControl, selectors: [[\"agm-pan-control\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: AgmMapControl, useExisting: AgmPanControl }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵAgmPanControl_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AgmPanControl);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPanControl, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-map agm-pan-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmPanControl }]\n            }]\n    }], null, null); })();\nclass AgmRotateControl extends AgmMapControl {\n    getOptions() {\n        return {\n            rotateControl: true,\n            rotateControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmRotateControl.ɵfac = function AgmRotateControl_Factory(t) { return ɵAgmRotateControl_BaseFactory(t || AgmRotateControl); };\nAgmRotateControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmRotateControl, selectors: [[\"agm-rotate-control\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: AgmMapControl, useExisting: AgmRotateControl }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵAgmRotateControl_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AgmRotateControl);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmRotateControl, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-map agm-rotate-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmRotateControl }]\n            }]\n    }], null, null); })();\nclass AgmScaleControl extends AgmMapControl {\n    getOptions() {\n        return {\n            scaleControl: true,\n        };\n    }\n}\nAgmScaleControl.ɵfac = function AgmScaleControl_Factory(t) { return ɵAgmScaleControl_BaseFactory(t || AgmScaleControl); };\nAgmScaleControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmScaleControl, selectors: [[\"agm-scale-control\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: AgmMapControl, useExisting: AgmScaleControl }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵAgmScaleControl_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AgmScaleControl);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmScaleControl, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-map agm-scale-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmScaleControl }]\n            }]\n    }], null, null); })();\nclass AgmStreetViewControl extends AgmMapControl {\n    getOptions() {\n        return {\n            streetViewControl: true,\n            streetViewControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n            },\n        };\n    }\n}\nAgmStreetViewControl.ɵfac = function AgmStreetViewControl_Factory(t) { return ɵAgmStreetViewControl_BaseFactory(t || AgmStreetViewControl); };\nAgmStreetViewControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmStreetViewControl, selectors: [[\"agm-street-view-control\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: AgmMapControl, useExisting: AgmStreetViewControl }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵAgmStreetViewControl_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AgmStreetViewControl);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmStreetViewControl, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-map agm-street-view-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmStreetViewControl }]\n            }]\n    }], null, null); })();\nclass AgmZoomControl extends AgmMapControl {\n    getOptions() {\n        return {\n            zoomControl: true,\n            zoomControlOptions: {\n                position: this.position && google.maps.ControlPosition[this.position],\n                style: this.style && google.maps.ZoomControlStyle[this.style],\n            },\n        };\n    }\n}\nAgmZoomControl.ɵfac = function AgmZoomControl_Factory(t) { return ɵAgmZoomControl_BaseFactory(t || AgmZoomControl); };\nAgmZoomControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmZoomControl, selectors: [[\"agm-zoom-control\"]], inputs: { style: \"style\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: AgmMapControl, useExisting: AgmZoomControl }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nAgmZoomControl.propDecorators = {\n    style: [{ type: Input }]\n};\nconst ɵAgmZoomControl_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AgmZoomControl);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmZoomControl, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-map agm-zoom-control',\n                providers: [{ provide: AgmMapControl, useExisting: AgmZoomControl }]\n            }]\n    }], null, { style: [{\n            type: Input\n        }] }); })();\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmMap {\n    constructor(_elem, _mapsWrapper, \n    // tslint:disable-next-line: ban-types\n    _platformId, _fitBoundsService, _zone) {\n        this._elem = _elem;\n        this._mapsWrapper = _mapsWrapper;\n        this._platformId = _platformId;\n        this._fitBoundsService = _fitBoundsService;\n        this._zone = _zone;\n        /**\n         * The longitude that defines the center of the map.\n         */\n        this.longitude = 0;\n        /**\n         * The latitude that defines the center of the map.\n         */\n        this.latitude = 0;\n        /**\n         * The zoom level of the map. The default zoom level is 8.\n         */\n        this.zoom = 8;\n        /**\n         * Enables/disables if map is draggable.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = true;\n        /**\n         * Enables/disables zoom and center on double click. Enabled by default.\n         */\n        this.disableDoubleClickZoom = false;\n        /**\n         * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n         * value cannot get updated.\n         */\n        this.disableDefaultUI = false;\n        /**\n         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n         */\n        this.scrollwheel = true;\n        /**\n         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n         * enabled by default.\n         */\n        this.keyboardShortcuts = true;\n        /**\n         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n         * modes, these styles will only apply to labels and geometry.\n         */\n        this.styles = [];\n        /**\n         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n         * used to\n         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n         */\n        this.usePanning = false;\n        /**\n         * Sets the viewport to contain the given bounds.\n         * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n         */\n        this.fitBounds = false;\n        /**\n         * The map mapTypeId. Defaults to 'roadmap'.\n         */\n        this.mapTypeId = 'ROADMAP';\n        /**\n         * When false, map icons are not clickable. A map icon represents a point of interest,\n         * also known as a POI. By default map icons are clickable.\n         */\n        this.clickableIcons = true;\n        /**\n         * A map icon represents a point of interest, also known as a POI.\n         * When map icons are clickable by default, an info window is displayed.\n         * When this property is set to false, the info window will not be shown but the click event\n         * will still fire\n         */\n        this.showDefaultInfoWindow = true;\n        /**\n         * This setting controls how gestures on the map are handled.\n         * Allowed values:\n         * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n         * - 'greedy'      (All touch gestures pan or zoom the map.)\n         * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n         * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n         */\n        this.gestureHandling = 'auto';\n        /**\n         * Controls the automatic switching behavior for the angle of incidence of\n         * the map. The only allowed values are 0 and 45. The value 0 causes the map\n         * to always use a 0° overhead view regardless of the zoom level and\n         * viewport. The value 45 causes the tilt angle to automatically switch to\n         * 45 whenever 45° imagery is available for the current zoom level and\n         * viewport, and switch back to 0 whenever 45° imagery is not available\n         * (this is the default behavior). 45° imagery is only available for\n         * satellite and hybrid map types, within some locations, and at some zoom\n         * levels. Note: getTilt returns the current tilt angle, not the value\n         * specified by this option. Because getTilt and this option refer to\n         * different things, do not bind() the tilt property; doing so may yield\n         * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n         */\n        this.tilt = 0;\n        this._observableSubscriptions = [];\n        /**\n         * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n         * marker or infoWindow).\n         */\n        // tslint:disable-next-line: max-line-length\n        this.mapClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapRightClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapDblClick = new EventEmitter();\n        /**\n         * This event emitter is fired when the map center changes.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event is fired when the viewport bounds have changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event is fired when the mapTypeId property changes.\n         */\n        this.mapTypeIdChange = new EventEmitter();\n        /**\n         * This event is fired when the map becomes idle after panning or zooming.\n         */\n        this.idle = new EventEmitter();\n        /**\n         * This event is fired when the zoom level has changed.\n         */\n        this.zoomChange = new EventEmitter();\n        /**\n         * This event is fired when the google map is fully initialized.\n         * You get the google.maps.Map instance as a result of this EventEmitter.\n         */\n        this.mapReady = new EventEmitter();\n        /**\n         * This event is fired when the visible tiles have finished loading.\n         */\n        this.tilesLoaded = new EventEmitter();\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (isPlatformServer(this._platformId)) {\n            // The code is running on the server, do nothing\n            return;\n        }\n        // todo: this should be solved with a new component and a viewChild decorator\n        const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n        this._initMapInstance(container);\n    }\n    _initMapInstance(el) {\n        this._mapsWrapper.createMap(el, {\n            center: { lat: this.latitude || 0, lng: this.longitude || 0 },\n            zoom: this.zoom,\n            minZoom: this.minZoom,\n            maxZoom: this.maxZoom,\n            controlSize: this.controlSize,\n            disableDefaultUI: this.disableDefaultUI,\n            disableDoubleClickZoom: this.disableDoubleClickZoom,\n            scrollwheel: this.scrollwheel,\n            backgroundColor: this.backgroundColor,\n            draggable: this.draggable,\n            draggableCursor: this.draggableCursor,\n            draggingCursor: this.draggingCursor,\n            keyboardShortcuts: this.keyboardShortcuts,\n            styles: this.styles,\n            mapTypeId: this.mapTypeId.toLocaleLowerCase(),\n            clickableIcons: this.clickableIcons,\n            gestureHandling: this.gestureHandling,\n            tilt: this.tilt,\n            restriction: this.restriction,\n        })\n            .then(() => this._mapsWrapper.getNativeMap())\n            .then(map => this.mapReady.emit(map));\n        // register event listeners\n        this._handleMapCenterChange();\n        this._handleMapZoomChange();\n        this._handleMapMouseEvents();\n        this._handleBoundsChange();\n        this._handleMapTypeIdChange();\n        this._handleTilesLoadedEvent();\n        this._handleIdleEvent();\n        this._handleControlChange();\n    }\n    /** @internal */\n    ngOnDestroy() {\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n        // remove all listeners from the map instance\n        this._mapsWrapper.clearInstanceListeners();\n        if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n        }\n    }\n    /* @internal */\n    ngOnChanges(changes) {\n        this._updateMapOptionsChanges(changes);\n        this._updatePosition(changes);\n    }\n    _updateMapOptionsChanges(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmMap._mapOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._mapsWrapper.setMapOptions(options);\n    }\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n    triggerResize(recenter = true) {\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n                    if (recenter) {\n                        this.fitBounds != null ? this._fitBounds() : this._setCenter();\n                    }\n                    resolve();\n                });\n            });\n        });\n    }\n    _updatePosition(changes) {\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] == null && changes['longitude'] == null &&\n            !changes['fitBounds']) {\n            // no position update needed\n            return;\n        }\n        // tslint:enable: no-string-literal\n        // we prefer fitBounds in changes\n        if ('fitBounds' in changes) {\n            this._fitBounds();\n            return;\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        this._setCenter();\n    }\n    _setCenter() {\n        const newCenter = {\n            lat: this.latitude,\n            lng: this.longitude,\n        };\n        if (this.usePanning) {\n            this._mapsWrapper.panTo(newCenter);\n        }\n        else {\n            this._mapsWrapper.setCenter(newCenter);\n        }\n    }\n    _fitBounds() {\n        switch (this.fitBounds) {\n            case true:\n                this._subscribeToFitBoundsUpdates();\n                break;\n            case false:\n                if (this._fitBoundsSubscription) {\n                    this._fitBoundsSubscription.unsubscribe();\n                }\n                break;\n            default:\n                if (this._fitBoundsSubscription) {\n                    this._fitBoundsSubscription.unsubscribe();\n                }\n                this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n        }\n    }\n    _subscribeToFitBoundsUpdates() {\n        this._zone.runOutsideAngular(() => {\n            this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n                this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n            });\n        });\n    }\n    _updateBounds(bounds, padding) {\n        if (!bounds) {\n            return;\n        }\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n            const newBounds = new google.maps.LatLngBounds();\n            newBounds.union(bounds);\n            bounds = newBounds;\n        }\n        if (this.usePanning) {\n            this._mapsWrapper.panToBounds(bounds, padding);\n            return;\n        }\n        this._mapsWrapper.fitBounds(bounds, padding);\n    }\n    _isLatLngBoundsLiteral(bounds) {\n        return bounds != null && bounds.extend === undefined;\n    }\n    _handleMapCenterChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {\n            this._mapsWrapper.getCenter().then((center) => {\n                this.latitude = center.lat();\n                this.longitude = center.lng();\n                this.centerChange.emit({ lat: this.latitude, lng: this.longitude });\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleBoundsChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {\n            this._mapsWrapper.getBounds().then((bounds) => { this.boundsChange.emit(bounds); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapTypeIdChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {\n            this._mapsWrapper.getMapTypeId().then((mapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapZoomChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {\n            this._mapsWrapper.getZoom().then((z) => {\n                this.zoom = z;\n                this.zoomChange.emit(z);\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleIdleEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(() => { this.idle.emit(void 0); });\n        this._observableSubscriptions.push(s);\n    }\n    _handleTilesLoadedEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(() => this.tilesLoaded.emit(void 0));\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapMouseEvents() {\n        const events = [\n            { name: 'click', emitter: this.mapClick },\n            { name: 'rightclick', emitter: this.mapRightClick },\n            { name: 'dblclick', emitter: this.mapDblClick },\n        ];\n        events.forEach(e => {\n            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(([event]) => {\n                // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n                if (event.placeId && !this.showDefaultInfoWindow) {\n                    event.stop();\n                }\n                e.emitter.emit(event);\n            });\n            this._observableSubscriptions.push(s);\n        });\n    }\n    _handleControlChange() {\n        this._setControls();\n        this.mapControls.changes.subscribe(() => this._setControls());\n    }\n    _setControls() {\n        const controlOptions = {\n            fullscreenControl: !this.disableDefaultUI,\n            mapTypeControl: false,\n            panControl: false,\n            rotateControl: false,\n            scaleControl: false,\n            streetViewControl: !this.disableDefaultUI,\n            zoomControl: !this.disableDefaultUI,\n        };\n        this._mapsWrapper.getNativeMap().then(() => {\n            this.mapControls.forEach(control => Object.assign(controlOptions, control.getOptions()));\n            this._mapsWrapper.setMapOptions(controlOptions);\n        });\n    }\n}\nAgmMap.ɵfac = function AgmMap_Factory(t) { return new (t || AgmMap)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FitBoundsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nAgmMap.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AgmMap, selectors: [[\"agm-map\"]], contentQueries: function AgmMap_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmMapControl, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mapControls = _t);\n    } }, inputs: { longitude: \"longitude\", latitude: \"latitude\", zoom: \"zoom\", draggable: [\"mapDraggable\", \"draggable\"], disableDoubleClickZoom: \"disableDoubleClickZoom\", disableDefaultUI: \"disableDefaultUI\", scrollwheel: \"scrollwheel\", keyboardShortcuts: \"keyboardShortcuts\", styles: \"styles\", usePanning: \"usePanning\", fitBounds: \"fitBounds\", mapTypeId: \"mapTypeId\", clickableIcons: \"clickableIcons\", showDefaultInfoWindow: \"showDefaultInfoWindow\", gestureHandling: \"gestureHandling\", tilt: \"tilt\", minZoom: \"minZoom\", maxZoom: \"maxZoom\", controlSize: \"controlSize\", backgroundColor: \"backgroundColor\", draggableCursor: \"draggableCursor\", draggingCursor: \"draggingCursor\", fitBoundsPadding: \"fitBoundsPadding\", restriction: \"restriction\" }, outputs: { mapClick: \"mapClick\", mapRightClick: \"mapRightClick\", mapDblClick: \"mapDblClick\", centerChange: \"centerChange\", boundsChange: \"boundsChange\", mapTypeIdChange: \"mapTypeIdChange\", idle: \"idle\", zoomChange: \"zoomChange\", mapReady: \"mapReady\", tilesLoaded: \"tilesLoaded\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            CircleManager,\n            DataLayerManager,\n            DataLayerManager,\n            FitBoundsService,\n            GoogleMapsAPIWrapper,\n            InfoWindowManager,\n            KmlLayerManager,\n            LayerManager,\n            MarkerManager,\n            PolygonManager,\n            PolylineManager,\n            RectangleManager,\n        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 3, vars: 0, consts: [[1, \"agm-map-container-inner\", \"sebm-google-map-container-inner\"], [1, \"agm-map-content\"]], template: function AgmMap_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".agm-map-container-inner[_ngcontent-%COMP%] {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content[_ngcontent-%COMP%] {\\n      display:none;\\n    }\"] });\n/**\n * Map option attributes that can change over time\n */\nAgmMap._mapOptionsAttributes = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'styles', 'zoom', 'minZoom', 'maxZoom', 'mapTypeId', 'clickableIcons',\n    'gestureHandling', 'tilt', 'restriction',\n];\nAgmMap.ctorParameters = () => [\n    { type: ElementRef },\n    { type: GoogleMapsAPIWrapper },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: FitBoundsService },\n    { type: NgZone }\n];\nAgmMap.propDecorators = {\n    longitude: [{ type: Input }],\n    latitude: [{ type: Input }],\n    zoom: [{ type: Input }],\n    minZoom: [{ type: Input }],\n    maxZoom: [{ type: Input }],\n    controlSize: [{ type: Input }],\n    draggable: [{ type: Input, args: ['mapDraggable',] }],\n    disableDoubleClickZoom: [{ type: Input }],\n    disableDefaultUI: [{ type: Input }],\n    scrollwheel: [{ type: Input }],\n    backgroundColor: [{ type: Input }],\n    draggableCursor: [{ type: Input }],\n    draggingCursor: [{ type: Input }],\n    keyboardShortcuts: [{ type: Input }],\n    styles: [{ type: Input }],\n    usePanning: [{ type: Input }],\n    fitBounds: [{ type: Input }],\n    fitBoundsPadding: [{ type: Input }],\n    mapTypeId: [{ type: Input }],\n    clickableIcons: [{ type: Input }],\n    showDefaultInfoWindow: [{ type: Input }],\n    gestureHandling: [{ type: Input }],\n    tilt: [{ type: Input }],\n    restriction: [{ type: Input }],\n    mapClick: [{ type: Output }],\n    mapRightClick: [{ type: Output }],\n    mapDblClick: [{ type: Output }],\n    centerChange: [{ type: Output }],\n    boundsChange: [{ type: Output }],\n    mapTypeIdChange: [{ type: Output }],\n    idle: [{ type: Output }],\n    zoomChange: [{ type: Output }],\n    mapReady: [{ type: Output }],\n    tilesLoaded: [{ type: Output }],\n    mapControls: [{ type: ContentChildren, args: [AgmMapControl,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmMap, [{\n        type: Component,\n        args: [{\n                selector: 'agm-map',\n                providers: [\n                    CircleManager,\n                    DataLayerManager,\n                    DataLayerManager,\n                    FitBoundsService,\n                    GoogleMapsAPIWrapper,\n                    InfoWindowManager,\n                    KmlLayerManager,\n                    LayerManager,\n                    MarkerManager,\n                    PolygonManager,\n                    PolylineManager,\n                    RectangleManager,\n                ],\n                template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n                styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: GoogleMapsAPIWrapper }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: FitBoundsService }, { type: ɵngcc0.NgZone }]; }, { longitude: [{\n            type: Input\n        }], latitude: [{\n            type: Input\n        }], zoom: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['mapDraggable']\n        }], disableDoubleClickZoom: [{\n            type: Input\n        }], disableDefaultUI: [{\n            type: Input\n        }], scrollwheel: [{\n            type: Input\n        }], keyboardShortcuts: [{\n            type: Input\n        }], styles: [{\n            type: Input\n        }], usePanning: [{\n            type: Input\n        }], fitBounds: [{\n            type: Input\n        }], mapTypeId: [{\n            type: Input\n        }], clickableIcons: [{\n            type: Input\n        }], showDefaultInfoWindow: [{\n            type: Input\n        }], gestureHandling: [{\n            type: Input\n        }], tilt: [{\n            type: Input\n        }], mapClick: [{\n            type: Output\n        }], mapRightClick: [{\n            type: Output\n        }], mapDblClick: [{\n            type: Output\n        }], centerChange: [{\n            type: Output\n        }], boundsChange: [{\n            type: Output\n        }], mapTypeIdChange: [{\n            type: Output\n        }], idle: [{\n            type: Output\n        }], zoomChange: [{\n            type: Output\n        }], mapReady: [{\n            type: Output\n        }], tilesLoaded: [{\n            type: Output\n        }], minZoom: [{\n            type: Input\n        }], maxZoom: [{\n            type: Input\n        }], controlSize: [{\n            type: Input\n        }], backgroundColor: [{\n            type: Input\n        }], draggableCursor: [{\n            type: Input\n        }], draggingCursor: [{\n            type: Input\n        }], fitBoundsPadding: [{\n            type: Input\n        }], restriction: [{\n            type: Input\n        }], mapControls: [{\n            type: ContentChildren,\n            args: [AgmMapControl]\n        }] }); })();\n\nlet markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmMarker {\n    constructor(_markerManager) {\n        this._markerManager = _markerManager;\n        /**\n         * If true, the marker can be dragged. Default value is false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If true, the marker is visible\n         */\n        this.visible = true;\n        /**\n         * Whether to automatically open the child info window when the marker is clicked.\n         */\n        this.openInfoWindow = true;\n        /**\n         * The marker's opacity between 0.0 and 1.0.\n         */\n        this.opacity = 1;\n        /**\n         * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n         * front of markers with lower values. By default, markers are displayed according to their\n         * vertical position on screen, with lower markers appearing in front of markers further up the\n         * screen.\n         */\n        this.zIndex = 1;\n        /**\n         * If true, the marker can be clicked. Default value is true.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.clickable = true;\n        /**\n         * This event is fired when the marker's animation property changes.\n         */\n        this.animationChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the marker.\n         */\n        this.markerClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks twice on the marker.\n         */\n        this.markerDblClick = new EventEmitter();\n        /**\n         * This event is fired when the user rightclicks on the marker.\n         */\n        this.markerRightClick = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the marker.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the marker.\n         */\n        // tslint:disable-next-line: no-output-native\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the marker.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user mouses over the marker.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the user mouses outside the marker.\n         */\n        this.mouseOut = new EventEmitter();\n        /** @internal */\n        this.infoWindow = new QueryList();\n        this._markerAddedToManger = false;\n        this._observableSubscriptions = [];\n        this._fitBoundsDetails$ = new ReplaySubject(1);\n        this._id = (markerId++).toString();\n    }\n    /* @internal */\n    ngAfterContentInit() {\n        this.handleInfoWindowUpdate();\n        this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n    }\n    handleInfoWindowUpdate() {\n        if (this.infoWindow.length > 1) {\n            throw new Error('Expected no more than one info window.');\n        }\n        this.infoWindow.forEach(marker => {\n            marker.hostMarker = this;\n        });\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (typeof this.latitude === 'string') {\n            this.latitude = Number(this.latitude);\n        }\n        if (typeof this.longitude === 'string') {\n            this.longitude = Number(this.longitude);\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        if (!this._markerAddedToManger) {\n            this._markerManager.addMarker(this);\n            this._updateFitBoundsDetails();\n            this._markerAddedToManger = true;\n            this._addEventListeners();\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] || changes['longitude']) {\n            this._markerManager.updateMarkerPosition(this);\n            this._updateFitBoundsDetails();\n        }\n        if (changes['title']) {\n            this._markerManager.updateTitle(this);\n        }\n        if (changes['label']) {\n            this._markerManager.updateLabel(this);\n        }\n        if (changes['draggable']) {\n            this._markerManager.updateDraggable(this);\n        }\n        if (changes['iconUrl']) {\n            this._markerManager.updateIcon(this);\n        }\n        if (changes['opacity']) {\n            this._markerManager.updateOpacity(this);\n        }\n        if (changes['visible']) {\n            this._markerManager.updateVisible(this);\n        }\n        if (changes['zIndex']) {\n            this._markerManager.updateZIndex(this);\n        }\n        if (changes['clickable']) {\n            this._markerManager.updateClickable(this);\n        }\n        if (changes['animation']) {\n            this._markerManager.updateAnimation(this);\n        }\n        // tslint:enable: no-string-literal\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this._fitBoundsDetails$.asObservable();\n    }\n    _updateFitBoundsDetails() {\n        this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n    }\n    _addEventListeners() {\n        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n            if (this.openInfoWindow) {\n                this.infoWindow.forEach(infoWindow => infoWindow.open());\n            }\n            this.markerClick.emit(this);\n        });\n        this._observableSubscriptions.push(cs);\n        const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n            this.markerDblClick.emit(null);\n        });\n        this._observableSubscriptions.push(dcs);\n        const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n            this.markerRightClick.emit(null);\n        });\n        this._observableSubscriptions.push(rc);\n        const ds = this._markerManager.createEventObservable('dragstart', this)\n            .subscribe(e => this.dragStart.emit(e));\n        this._observableSubscriptions.push(ds);\n        const d = this._markerManager.createEventObservable('drag', this)\n            .subscribe(e => this.drag.emit(e));\n        this._observableSubscriptions.push(d);\n        const de = this._markerManager.createEventObservable('dragend', this)\n            .subscribe(e => this.dragEnd.emit(e));\n        this._observableSubscriptions.push(de);\n        const mover = this._markerManager.createEventObservable('mouseover', this)\n            .subscribe(e => this.mouseOver.emit(e));\n        this._observableSubscriptions.push(mover);\n        const mout = this._markerManager.createEventObservable('mouseout', this)\n            .subscribe(e => this.mouseOut.emit(e));\n        this._observableSubscriptions.push(mout);\n        const anChng = this._markerManager.createEventObservable('animation_changed', this)\n            .subscribe(() => {\n            this.animationChange.emit(this.animation);\n        });\n        this._observableSubscriptions.push(anChng);\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmMarker-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() {\n        this._markerManager.deleteMarker(this);\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n    }\n}\nAgmMarker.ɵfac = function AgmMarker_Factory(t) { return new (t || AgmMarker)(ɵngcc0.ɵɵdirectiveInject(MarkerManager)); };\nAgmMarker.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmMarker, selectors: [[\"agm-marker\"]], contentQueries: function AgmMarker_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmInfoWindow, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infoWindow = _t);\n    } }, inputs: { draggable: [\"markerDraggable\", \"draggable\"], visible: \"visible\", openInfoWindow: \"openInfoWindow\", opacity: \"opacity\", zIndex: \"zIndex\", clickable: [\"markerClickable\", \"clickable\"], latitude: \"latitude\", longitude: \"longitude\", title: \"title\", label: \"label\", iconUrl: \"iconUrl\", animation: \"animation\" }, outputs: { animationChange: \"animationChange\", markerClick: \"markerClick\", markerDblClick: \"markerDblClick\", markerRightClick: \"markerRightClick\", dragStart: \"dragStart\", drag: \"drag\", dragEnd: \"dragEnd\", mouseOver: \"mouseOver\", mouseOut: \"mouseOut\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker) },\n        ]), ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmMarker.ctorParameters = () => [\n    { type: MarkerManager }\n];\nAgmMarker.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    title: [{ type: Input }],\n    label: [{ type: Input }],\n    draggable: [{ type: Input, args: ['markerDraggable',] }],\n    iconUrl: [{ type: Input }],\n    visible: [{ type: Input }],\n    openInfoWindow: [{ type: Input }],\n    opacity: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    clickable: [{ type: Input, args: ['markerClickable',] }],\n    animation: [{ type: Input }],\n    animationChange: [{ type: Output }],\n    markerClick: [{ type: Output }],\n    markerDblClick: [{ type: Output }],\n    markerRightClick: [{ type: Output }],\n    dragStart: [{ type: Output }],\n    drag: [{ type: Output }],\n    dragEnd: [{ type: Output }],\n    mouseOver: [{ type: Output }],\n    mouseOut: [{ type: Output }],\n    infoWindow: [{ type: ContentChildren, args: [AgmInfoWindow,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmMarker, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-marker',\n                providers: [\n                    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker) },\n                ]\n            }]\n    }], function () { return [{ type: MarkerManager }]; }, { draggable: [{\n            type: Input,\n            args: ['markerDraggable']\n        }], visible: [{\n            type: Input\n        }], openInfoWindow: [{\n            type: Input\n        }], opacity: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], clickable: [{\n            type: Input,\n            args: ['markerClickable']\n        }], animationChange: [{\n            type: Output\n        }], markerClick: [{\n            type: Output\n        }], markerDblClick: [{\n            type: Output\n        }], markerRightClick: [{\n            type: Output\n        }], dragStart: [{\n            type: Output\n        }], drag: [{\n            type: Output\n        }], dragEnd: [{\n            type: Output\n        }], mouseOver: [{\n            type: Output\n        }], mouseOut: [{\n            type: Output\n        }], infoWindow: [{\n            type: ContentChildren,\n            args: [AgmInfoWindow]\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }], title: [{\n            type: Input\n        }], label: [{\n            type: Input\n        }], iconUrl: [{\n            type: Input\n        }], animation: [{\n            type: Input\n        }] }); })();\n\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: LatLngLiteral[] = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: LatLngLiteral[][] = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\nclass AgmPolygon {\n    constructor(_polygonManager) {\n        this._polygonManager = _polygonManager;\n        /**\n         * Indicates whether this Polygon handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic\n         * property defines the mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control\n         * points shown at the vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will\n         * follow the curvature of the Earth. When false, edges of the polygon are\n         * rendered as straight lines in screen space. Note that the shape of a\n         * geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * The ordered sequence of coordinates that designates a closed loop.\n         * Unlike polylines, a polygon may consist of one or more paths.\n         *  As a result, the paths property may specify one or more arrays of\n         * LatLng coordinates. Paths are closed automatically; do not repeat the\n         * first vertex of the path as the last vertex. Simple polygons may be\n         * defined using a single array of LatLngs. More complex polygons may\n         * specify an array of arrays. Any simple arrays are converted into Arrays.\n         * Inserting or removing LatLngs from the Array will automatically update\n         * the polygon on the map.\n         */\n        this.paths = [];\n        /**\n         * This event is fired when the DOM click event is fired on the Polygon.\n         */\n        this.polyClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polygon.\n         */\n        this.polyDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polygon.\n         */\n        this.polyDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polygon.\n         */\n        this.polyDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polygon.\n         */\n        this.polyDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polygon.\n         */\n        this.polyMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polygon.\n         */\n        this.polyMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseout.\n         */\n        this.polyMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseover.\n         */\n        this.polyMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polygon\n         */\n        this.polyMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polygon is right-clicked on.\n         */\n        this.polyRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polygon first path changes.\n         */\n        this.polyPathsChange = new EventEmitter();\n        this._polygonAddedToManager = false;\n        this._subscriptions = [];\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (!this._polygonAddedToManager) {\n            this._init();\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this._polygonAddedToManager) {\n            this._init();\n            return;\n        }\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    }\n    _init() {\n        this._polygonManager.addPolygon(this);\n        this._polygonAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.polyClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.polyDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.polyDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.polyDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.polyDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.polyMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.polyMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.polyMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.polyMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.polyMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.polyRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polygonManager.createPathEventObservable(this)\n            .then(paths$ => {\n            const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    _updatePolygonOptions(changes) {\n        return Object.keys(changes)\n            .filter(k => AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polygonManager.deletePolygon(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n    getPath() {\n        return this._polygonManager.getPath(this);\n    }\n    getPaths() {\n        return this._polygonManager.getPaths(this);\n    }\n}\nAgmPolygon.ɵfac = function AgmPolygon_Factory(t) { return new (t || AgmPolygon)(ɵngcc0.ɵɵdirectiveInject(PolygonManager)); };\nAgmPolygon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolygon, selectors: [[\"agm-polygon\"]], inputs: { clickable: \"clickable\", draggable: [\"polyDraggable\", \"draggable\"], editable: \"editable\", geodesic: \"geodesic\", paths: \"paths\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", strokeWeight: \"strokeWeight\", visible: \"visible\", zIndex: \"zIndex\" }, outputs: { polyClick: \"polyClick\", polyDblClick: \"polyDblClick\", polyDrag: \"polyDrag\", polyDragEnd: \"polyDragEnd\", polyDragStart: \"polyDragStart\", polyMouseDown: \"polyMouseDown\", polyMouseMove: \"polyMouseMove\", polyMouseOut: \"polyMouseOut\", polyMouseOver: \"polyMouseOver\", polyMouseUp: \"polyMouseUp\", polyRightClick: \"polyRightClick\", polyPathsChange: \"polyPathsChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmPolygon._polygonOptionsAttributes = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible',\n];\nAgmPolygon.ctorParameters = () => [\n    { type: PolygonManager }\n];\nAgmPolygon.propDecorators = {\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['polyDraggable',] }],\n    editable: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    geodesic: [{ type: Input }],\n    paths: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    polyClick: [{ type: Output }],\n    polyDblClick: [{ type: Output }],\n    polyDrag: [{ type: Output }],\n    polyDragEnd: [{ type: Output }],\n    polyDragStart: [{ type: Output }],\n    polyMouseDown: [{ type: Output }],\n    polyMouseMove: [{ type: Output }],\n    polyMouseOut: [{ type: Output }],\n    polyMouseOver: [{ type: Output }],\n    polyMouseUp: [{ type: Output }],\n    polyRightClick: [{ type: Output }],\n    polyPathsChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolygon, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-polygon'\n            }]\n    }], function () { return [{ type: PolygonManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['polyDraggable']\n        }], editable: [{\n            type: Input\n        }], geodesic: [{\n            type: Input\n        }], paths: [{\n            type: Input\n        }], polyClick: [{\n            type: Output\n        }], polyDblClick: [{\n            type: Output\n        }], polyDrag: [{\n            type: Output\n        }], polyDragEnd: [{\n            type: Output\n        }], polyDragStart: [{\n            type: Output\n        }], polyMouseDown: [{\n            type: Output\n        }], polyMouseMove: [{\n            type: Output\n        }], polyMouseOut: [{\n            type: Output\n        }], polyMouseOver: [{\n            type: Output\n        }], polyMouseUp: [{\n            type: Output\n        }], polyRightClick: [{\n            type: Output\n        }], polyPathsChange: [{\n            type: Output\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }] }); })();\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n */\nclass AgmPolylineIcon {\n    ngOnInit() {\n        if (this.path == null) {\n            throw new Error('Icon Sequence path is required');\n        }\n    }\n}\nAgmPolylineIcon.ɵfac = function AgmPolylineIcon_Factory(t) { return new (t || AgmPolylineIcon)(); };\nAgmPolylineIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolylineIcon, selectors: [[\"agm-icon-sequence\"]], inputs: { fixedRotation: \"fixedRotation\", offset: \"offset\", repeat: \"repeat\", anchorX: \"anchorX\", anchorY: \"anchorY\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", path: \"path\", rotation: \"rotation\", scale: \"scale\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", strokeWeight: \"strokeWeight\" } });\nAgmPolylineIcon.propDecorators = {\n    fixedRotation: [{ type: Input }],\n    offset: [{ type: Input }],\n    repeat: [{ type: Input }],\n    anchorX: [{ type: Input }],\n    anchorY: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    path: [{ type: Input }],\n    rotation: [{ type: Input }],\n    scale: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokeWeight: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolylineIcon, [{\n        type: Directive,\n        args: [{ selector: 'agm-polyline agm-icon-sequence' }]\n    }], null, { fixedRotation: [{\n            type: Input\n        }], offset: [{\n            type: Input\n        }], repeat: [{\n            type: Input\n        }], anchorX: [{\n            type: Input\n        }], anchorY: [{\n            type: Input\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], path: [{\n            type: Input\n        }], rotation: [{\n            type: Input\n        }], scale: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }] }); })();\n\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\nclass AgmPolylinePoint {\n    constructor() {\n        /**\n         * This event emitter gets emitted when the position of the point changed.\n         */\n        this.positionChanged = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        // tslint:disable: no-string-literal\n        if (changes['latitude'] || changes['longitude']) {\n            this.positionChanged.emit({\n                lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n                lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n            });\n        }\n        // tslint:enable: no-string-literal\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this.positionChanged.pipe(startWith({ lat: this.latitude, lng: this.longitude }), map(position => ({ latLng: position })));\n    }\n}\nAgmPolylinePoint.ɵfac = function AgmPolylinePoint_Factory(t) { return new (t || AgmPolylinePoint)(); };\nAgmPolylinePoint.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolylinePoint, selectors: [[\"agm-polyline-point\"]], inputs: { latitude: \"latitude\", longitude: \"longitude\" }, outputs: { positionChanged: \"positionChanged\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint) },\n        ]), ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmPolylinePoint.ctorParameters = () => [];\nAgmPolylinePoint.propDecorators = {\n    latitude: [{ type: Input }],\n    longitude: [{ type: Input }],\n    positionChanged: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolylinePoint, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-polyline-point',\n                providers: [\n                    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint) },\n                ]\n            }]\n    }], function () { return []; }, { positionChanged: [{\n            type: Output\n        }], latitude: [{\n            type: Input\n        }], longitude: [{\n            type: Input\n        }] }); })();\n\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nclass AgmPolyline {\n    constructor(_polylineManager) {\n        this._polylineManager = _polylineManager;\n        /**\n         * Indicates whether this Polyline handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic property defines the\n         * mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control points shown at the\n         * vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * Whether this polyline is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the DOM click event is fired on the Polyline.\n         */\n        this.lineClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polyline.\n         */\n        this.lineDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polyline.\n         */\n        this.lineDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polyline.\n         */\n        this.lineDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polyline.\n         */\n        this.lineDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polyline.\n         */\n        this.lineMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polyline.\n         */\n        this.lineMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseout.\n         */\n        this.lineMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseover.\n         */\n        this.lineMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polyline\n         */\n        this.lineMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polyline is right-clicked on.\n         */\n        this.lineRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polyline's path changes.\n         */\n        this.polyPathChange = new EventEmitter();\n        this._polylineAddedToManager = false;\n        this._subscriptions = [];\n        this._id = (polylineId++).toString();\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (this.points.length) {\n            this.points.forEach((point) => {\n                const s = point.positionChanged.subscribe(() => { this._polylineManager.updatePolylinePoints(this); });\n                this._subscriptions.push(s);\n            });\n        }\n        if (!this._polylineAddedToManager) {\n            this._init();\n        }\n        const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n        this._subscriptions.push(pointSub);\n        this._polylineManager.updatePolylinePoints(this);\n        const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n        this._subscriptions.push(iconSub);\n    }\n    ngOnChanges(changes) {\n        if (!this._polylineAddedToManager) {\n            this._init();\n            return;\n        }\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach(k => options[k] = changes[k].currentValue);\n        this._polylineManager.setPolylineOptions(this, options);\n    }\n    getPath() {\n        return this._polylineManager.getPath(this);\n    }\n    _init() {\n        this._polylineManager.addPolyline(this);\n        this._polylineAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.lineClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.lineDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.lineDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.lineDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.lineDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.lineMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.lineMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.lineMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.lineMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.lineMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.lineRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polylineManager.createPathEventObservable(this).then((ob$) => {\n            const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    _getPoints() {\n        if (this.points) {\n            return this.points.toArray();\n        }\n        return [];\n    }\n    _getIcons() {\n        if (this.iconSequences) {\n            return this.iconSequences.toArray();\n        }\n        return [];\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polylineManager.deletePolyline(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n}\nAgmPolyline.ɵfac = function AgmPolyline_Factory(t) { return new (t || AgmPolyline)(ɵngcc0.ɵɵdirectiveInject(PolylineManager)); };\nAgmPolyline.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmPolyline, selectors: [[\"agm-polyline\"]], contentQueries: function AgmPolyline_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylinePoint, false);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, AgmPolylineIcon, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.points = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iconSequences = _t);\n    } }, inputs: { clickable: \"clickable\", draggable: [\"polylineDraggable\", \"draggable\"], editable: \"editable\", geodesic: \"geodesic\", visible: \"visible\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", strokeWeight: \"strokeWeight\", zIndex: \"zIndex\" }, outputs: { lineClick: \"lineClick\", lineDblClick: \"lineDblClick\", lineDrag: \"lineDrag\", lineDragEnd: \"lineDragEnd\", lineDragStart: \"lineDragStart\", lineMouseDown: \"lineMouseDown\", lineMouseMove: \"lineMouseMove\", lineMouseOut: \"lineMouseOut\", lineMouseOver: \"lineMouseOver\", lineMouseUp: \"lineMouseUp\", lineRightClick: \"lineRightClick\", polyPathChange: \"polyPathChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmPolyline._polylineOptionsAttributes = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex',\n];\nAgmPolyline.ctorParameters = () => [\n    { type: PolylineManager }\n];\nAgmPolyline.propDecorators = {\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['polylineDraggable',] }],\n    editable: [{ type: Input }],\n    geodesic: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    lineClick: [{ type: Output }],\n    lineDblClick: [{ type: Output }],\n    lineDrag: [{ type: Output }],\n    lineDragEnd: [{ type: Output }],\n    lineDragStart: [{ type: Output }],\n    lineMouseDown: [{ type: Output }],\n    lineMouseMove: [{ type: Output }],\n    lineMouseOut: [{ type: Output }],\n    lineMouseOver: [{ type: Output }],\n    lineMouseUp: [{ type: Output }],\n    lineRightClick: [{ type: Output }],\n    polyPathChange: [{ type: Output }],\n    points: [{ type: ContentChildren, args: [AgmPolylinePoint,] }],\n    iconSequences: [{ type: ContentChildren, args: [AgmPolylineIcon,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmPolyline, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-polyline'\n            }]\n    }], function () { return [{ type: PolylineManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['polylineDraggable']\n        }], editable: [{\n            type: Input\n        }], geodesic: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], lineClick: [{\n            type: Output\n        }], lineDblClick: [{\n            type: Output\n        }], lineDrag: [{\n            type: Output\n        }], lineDragEnd: [{\n            type: Output\n        }], lineDragStart: [{\n            type: Output\n        }], lineMouseDown: [{\n            type: Output\n        }], lineMouseMove: [{\n            type: Output\n        }], lineMouseOut: [{\n            type: Output\n        }], lineMouseOver: [{\n            type: Output\n        }], lineMouseUp: [{\n            type: Output\n        }], lineRightClick: [{\n            type: Output\n        }], polyPathChange: [{\n            type: Output\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }], points: [{\n            type: ContentChildren,\n            args: [AgmPolylinePoint]\n        }], iconSequences: [{\n            type: ContentChildren,\n            args: [AgmPolylineIcon]\n        }] }); })();\n\nclass AgmRectangle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Rectangle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this rectangle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this rectangle by dragging the control points shown at\n         * the center and around the circumference of the rectangle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this rectangle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the rectangle's is changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the rectangle.\n         */\n        // tslint:disable-next-line: no-output-native\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the rectangle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the rectangle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the rectangle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the rectangle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the rectangle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the rectangle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._rectangleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addRectangle(this);\n        this._rectangleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._rectangleAddedToManager) {\n            return;\n        }\n        // tslint:disable: no-string-literal\n        if (changes['north'] ||\n            changes['east'] ||\n            changes['south'] ||\n            changes['west']) {\n            this._manager.setBounds(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        // tslint:enable: no-string-literal\n        this._updateRectangleOptionsChanges(changes);\n    }\n    _updateRectangleOptionsChanges(changes) {\n        const options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmRectangle._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach(k => {\n            options[k] = changes[k].currentValue;\n        });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        const events = new Map();\n        events.set('bounds_changed', this.boundsChange);\n        events.set('click', this.rectangleClick);\n        events.set('dblclick', this.rectangleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragStart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager\n                .createEventObservable(eventName, this)\n                .subscribe(value => {\n                switch (eventName) {\n                    case 'bounds_changed':\n                        this._manager.getBounds(this).then(bounds => eventEmitter.emit({\n                            north: bounds.getNorthEast().lat(),\n                            east: bounds.getNorthEast().lng(),\n                            south: bounds.getSouthWest().lat(),\n                            west: bounds.getSouthWest().lng(),\n                        }));\n                        break;\n                    default:\n                        eventEmitter.emit(value);\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(s => s.unsubscribe());\n        this._eventSubscriptions = null;\n        this._manager.removeRectangle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n    getBounds() {\n        return this._manager.getBounds(this);\n    }\n}\nAgmRectangle.ɵfac = function AgmRectangle_Factory(t) { return new (t || AgmRectangle)(ɵngcc0.ɵɵdirectiveInject(RectangleManager)); };\nAgmRectangle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmRectangle, selectors: [[\"agm-rectangle\"]], inputs: { clickable: \"clickable\", draggable: [\"rectangleDraggable\", \"draggable\"], editable: \"editable\", strokePosition: \"strokePosition\", strokeWeight: \"strokeWeight\", visible: \"visible\", north: \"north\", east: \"east\", south: \"south\", west: \"west\", fillColor: \"fillColor\", fillOpacity: \"fillOpacity\", strokeColor: \"strokeColor\", strokeOpacity: \"strokeOpacity\", zIndex: \"zIndex\" }, outputs: { boundsChange: \"boundsChange\", rectangleClick: \"rectangleClick\", rectangleDblClick: \"rectangleDblClick\", drag: \"drag\", dragEnd: \"dragEnd\", dragStart: \"dragStart\", mouseDown: \"mouseDown\", mouseMove: \"mouseMove\", mouseOut: \"mouseOut\", mouseOver: \"mouseOver\", mouseUp: \"mouseUp\", rightClick: \"rightClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nAgmRectangle._mapOptions = [\n    'fillColor',\n    'fillOpacity',\n    'strokeColor',\n    'strokeOpacity',\n    'strokePosition',\n    'strokeWeight',\n    'visible',\n    'zIndex',\n    'clickable',\n];\nAgmRectangle.ctorParameters = () => [\n    { type: RectangleManager }\n];\nAgmRectangle.propDecorators = {\n    north: [{ type: Input }],\n    east: [{ type: Input }],\n    south: [{ type: Input }],\n    west: [{ type: Input }],\n    clickable: [{ type: Input }],\n    draggable: [{ type: Input, args: ['rectangleDraggable',] }],\n    editable: [{ type: Input }],\n    fillColor: [{ type: Input }],\n    fillOpacity: [{ type: Input }],\n    strokeColor: [{ type: Input }],\n    strokeOpacity: [{ type: Input }],\n    strokePosition: [{ type: Input }],\n    strokeWeight: [{ type: Input }],\n    visible: [{ type: Input }],\n    zIndex: [{ type: Input }],\n    boundsChange: [{ type: Output }],\n    rectangleClick: [{ type: Output }],\n    rectangleDblClick: [{ type: Output }],\n    drag: [{ type: Output }],\n    dragEnd: [{ type: Output }],\n    dragStart: [{ type: Output }],\n    mouseDown: [{ type: Output }],\n    mouseMove: [{ type: Output }],\n    mouseOut: [{ type: Output }],\n    mouseOver: [{ type: Output }],\n    mouseUp: [{ type: Output }],\n    rightClick: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmRectangle, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-rectangle'\n            }]\n    }], function () { return [{ type: RectangleManager }]; }, { clickable: [{\n            type: Input\n        }], draggable: [{\n            type: Input,\n            args: ['rectangleDraggable']\n        }], editable: [{\n            type: Input\n        }], strokePosition: [{\n            type: Input\n        }], strokeWeight: [{\n            type: Input\n        }], visible: [{\n            type: Input\n        }], boundsChange: [{\n            type: Output\n        }], rectangleClick: [{\n            type: Output\n        }], rectangleDblClick: [{\n            type: Output\n        }], drag: [{\n            type: Output\n        }], dragEnd: [{\n            type: Output\n        }], dragStart: [{\n            type: Output\n        }], mouseDown: [{\n            type: Output\n        }], mouseMove: [{\n            type: Output\n        }], mouseOut: [{\n            type: Output\n        }], mouseOver: [{\n            type: Output\n        }], mouseUp: [{\n            type: Output\n        }], rightClick: [{\n            type: Output\n        }], north: [{\n            type: Input\n        }], east: [{\n            type: Input\n        }], south: [{\n            type: Input\n        }], west: [{\n            type: Input\n        }], fillColor: [{\n            type: Input\n        }], fillOpacity: [{\n            type: Input\n        }], strokeColor: [{\n            type: Input\n        }], strokeOpacity: [{\n            type: Input\n        }], zIndex: [{\n            type: Input\n        }] }); })();\n\nlet layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\nclass AgmTransitLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$3++).toString();\n        /**\n         * Hide/show transit layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this);\n        this._addedToManager = true;\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmTransitLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n}\nAgmTransitLayer.ɵfac = function AgmTransitLayer_Factory(t) { return new (t || AgmTransitLayer)(ɵngcc0.ɵɵdirectiveInject(LayerManager)); };\nAgmTransitLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AgmTransitLayer, selectors: [[\"agm-transit-layer\"]], inputs: { visible: \"visible\" } });\nAgmTransitLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\nAgmTransitLayer.propDecorators = {\n    visible: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmTransitLayer, [{\n        type: Directive,\n        args: [{\n                selector: 'agm-transit-layer'\n            }]\n    }], function () { return [{ type: LayerManager }]; }, { visible: [{\n            type: Input\n        }] }); })();\n\n/**\n * @internal\n */\nfunction coreDirectives() {\n    return [\n        AgmBicyclingLayer,\n        AgmCircle,\n        AgmDataLayer,\n        AgmFitBounds,\n        AgmFullscreenControl,\n        AgmInfoWindow,\n        AgmKmlLayer,\n        AgmMap,\n        AgmMapTypeControl,\n        AgmMarker,\n        AgmPanControl,\n        AgmPolygon,\n        AgmPolyline,\n        AgmPolylineIcon,\n        AgmPolylinePoint,\n        AgmRectangle,\n        AgmRotateControl,\n        AgmScaleControl,\n        AgmStreetViewControl,\n        AgmTransitLayer,\n        AgmZoomControl,\n    ];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\nclass AgmCoreModule {\n    /**\n     * Please use this method when you register the module at the root level.\n     */\n    static forRoot(lazyMapsAPILoaderConfig) {\n        return {\n            ngModule: AgmCoreModule,\n            providers: [\n                ...BROWSER_GLOBALS_PROVIDERS, { provide: MapsAPILoader, useClass: LazyMapsAPILoader },\n                { provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig },\n            ],\n        };\n    }\n}\nAgmCoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AgmCoreModule });\nAgmCoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AgmCoreModule_Factory(t) { return new (t || AgmCoreModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmCoreModule, { declarations: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl], exports: [AgmBicyclingLayer, AgmCircle, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmCoreModule, [{\n        type: NgModule,\n        args: [{ declarations: coreDirectives(), exports: coreDirectives() }]\n    }], null, null); })();\n\n/*\n * Public API Surface of core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmFullscreenControl, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMapTypeControl, AgmMarker, AgmPanControl, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmRotateControl, AgmScaleControl, AgmStreetViewControl, AgmTransitLayer, AgmZoomControl, CircleManager, DataLayerManager, FitBoundsAccessor, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, coreDirectives, FitBoundsService as ɵa, AgmMapControl as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };\n\n//# sourceMappingURL=agm-core.js.map","import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime,\n            refCount: false,\n            scheduler\n        };\n    }\n    return (source) => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler }) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next(value) { subject.next(value); },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n        }\n        const innerSub = subject.subscribe(this);\n        this.add(() => {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);\n        let retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return () => removeHandler(handler, retValue);\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map","<div class=\"container\">\r\n    <div class=\"card my-5\">\r\n        <div class=\"card-header text-center\">\r\n            <h1 class=\"mb-0\"><strong>Mission: {{launch.mission_name}}</strong></h1>\r\n        </div>\r\n        <div class=\"card-body pt-0 pb-4\">\r\n            <div *ngIf=\"launch.links?.flickr_images.length != 0\" id=\"imageCarousel\"\r\n                class=\"carousel slide py-4 border-bottom\" data-ride=\"carousel\">\r\n                <div class=\"carousel-inner\">\r\n                    <div *ngFor=\"let image of launch.links?.flickr_images\" class=\"carousel-item text-center\"\r\n                        [class.active]=\"launch.links.flickr_images[0] == image\">\r\n                        <img [src]=\"image\" alt=\"image\" height=\"300\" width=\"350\" loading=\"lazy\">\r\n                    </div>\r\n                </div>\r\n                <a class=\"carousel-control-prev\" href=\"#imageCarousel\" role=\"button\" data-slide=\"prev\">\r\n                    <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                    <span class=\"sr-only\">Previous</span>\r\n                </a>\r\n                <a class=\"carousel-control-next\" href=\"#imageCarousel\" role=\"button\" data-slide=\"next\">\r\n                    <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                    <span class=\"sr-only\">Next</span>\r\n                </a>\r\n            </div>\r\n            <div class=\"row pb-4 pt-0 border-bottom\">\r\n                <div class=\"col\">\r\n                    <table class=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\" class=\"border-0 p-0\"></th>\r\n                                <th scope=\"col\" class=\"border-0 p-0\"></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td scope=\"row\" class=\"border-top-0 pt-3 border-right mission__details\">Details</td>\r\n                                <td *ngIf=\"launch.details\" class=\"border-top-0 pt-3\">{{launch.details}}</td>\r\n                                <td *ngIf=\"!launch.details\" class=\"border-top-0 pt-3\">We don't have any description\r\n                                    about this mission</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td class=\"pt-3 border-right\" scope=\"row\">Start time</td>\r\n                                <td class=\"pt-3\">{{launch.launch_date_utc | date:'full'}}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"row pt-4 d-flex flex-column\">\r\n                <h2 class=\"text-center\">Payload Map</h2>\r\n                <div class=\"col d-flex justify-content-center\">\r\n                    <agm-map [zoom]=\"15\" [latitude]=\"landPad.lat\" [longitude]=\"landPad.lng\">\r\n                        <agm-marker [latitude]=\"landPad.lat\" [longitude]=\"landPad.lng\"></agm-marker>\r\n                    </agm-map>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card-footer text-center py-4\">\r\n            <div class=\"row\">\r\n                <div class=\"col d-flex justify-content-between\">\r\n                    <button class=\"btn btn-outline-primary\" [disabled]=\"launch.flight_number == 1\" (click)=\"centeredNav(1)\">Previous launch</button>\r\n                    <button class=\"btn btn-outline-primary\" [routerLink]=\"['']\">All launches</button>\r\n                    <button class=\"btn btn-outline-primary\" [disabled]=\"launch.flight_number == 111\" (click)=\"centeredNav(2)\">Next launch</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LaunchComponent } from './components/launch/launch.component';\r\n\r\nconst routes: Routes = [{ path: '', component: LaunchComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LaunchRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { GetlaunchesService } from '../../../../services/get-launches-service/getlaunches.service';\r\nimport { GetLandpadsService } from '../../../../services/get-landpads-service/getLandpads.service';\r\nimport { NavigateCenterService } from '../../../../services/navigate-center-service/navigate-center.service';\r\n\r\nimport { LandPad } from '../../../../models/landPad';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-launch',\r\n  templateUrl: './launch.component.html',\r\n  styleUrls: ['./launch.component.css']\r\n})\r\nexport class LaunchComponent implements OnInit {\r\n  id: any;\r\n  launch: any = {};\r\n  landPad: LandPad = {};\r\n\r\n  constructor(\r\n    private navCenter: NavigateCenterService,\r\n    private routeAct: ActivatedRoute,\r\n    private getLaunch: GetlaunchesService,\r\n    private getPayload: GetLandpadsService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.routeAct.params.pipe(\r\n      switchMap((param: any) => {\r\n        this.getLaunch.getCurrentLaunch(param.id).subscribe((launch: any) => this.launch = launch);\r\n        this.getPayload.getLandPads().subscribe((pad: LandPad) => this.landPad = pad);\r\n        return this.id = param.id;\r\n      })).subscribe(res => res);\r\n  }\r\n\r\n  centeredNav(num: number): void {\r\n    this.navCenter.navigateBetweenLaunch(num, this.id);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LaunchRoutingModule } from './launch-routing.module';\r\nimport { LaunchComponent } from './components/launch/launch.component';\r\n\r\nimport { AgmCoreModule } from '@agm/core';\r\n\r\n@NgModule({\r\n  declarations: [LaunchComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LaunchRoutingModule,\r\n    AgmCoreModule.forRoot({\r\n      apiKey: 'AIzaSyAvquCDRWvlZ2UCHtxAlNA3-M2_JRqd4mo'\r\n    })\r\n  ]\r\n})\r\nexport class LaunchModule { }\r\n"],"sourceRoot":"webpack:///"}